<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="2107"><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (1 samples, 0.05%)</title><rect x="0.0000%" y="597" width="0.0475%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (1 samples, 0.05%)</title><rect x="0.0000%" y="581" width="0.0475%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.05%)</title><rect x="0.0000%" y="565" width="0.0475%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.05%)</title><rect x="0.0000%" y="549" width="0.0475%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.05%)</title><rect x="0.0000%" y="533" width="0.0475%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.05%)</title><rect x="0.0000%" y="517" width="0.0475%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.05%)</title><rect x="0.0000%" y="501" width="0.0475%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.05%)</title><rect x="0.0000%" y="485" width="0.0475%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.05%)</title><rect x="0.0000%" y="469" width="0.0475%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.05%)</title><rect x="0.0000%" y="453" width="0.0475%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.05%)</title><rect x="0.0000%" y="437" width="0.0475%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.05%)</title><rect x="0.0000%" y="421" width="0.0475%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.05%)</title><rect x="0.0000%" y="405" width="0.0475%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.05%)</title><rect x="0.0000%" y="389" width="0.0475%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>dyld3::MachOFile::trieWalk(Diagnostics&amp;, unsigned char const*, unsigned char const*, char const*) (1 samples, 0.05%)</title><rect x="0.0000%" y="373" width="0.0475%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>dyld3::OverflowSafeArray&lt;unsigned int, 4294967295ull&gt;::verifySpace(unsigned long long) (1 samples, 0.05%)</title><rect x="0.0000%" y="357" width="0.0475%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>_free (3 samples, 0.14%)</title><rect x="0.8068%" y="309" width="0.1424%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="3"/><text x="1.0568%" y="319.50"></text></g><g><title>_nanov2_free (3 samples, 0.14%)</title><rect x="0.9492%" y="309" width="0.1424%" height="15" fill="rgb(210,31,41)" fg:x="20" fg:w="3"/><text x="1.1992%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.33%)</title><rect x="0.8068%" y="325" width="0.3322%" height="15" fill="rgb(221,200,47)" fg:x="17" fg:w="7"/><text x="1.0568%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.05%)</title><rect x="1.0916%" y="309" width="0.0475%" height="15" fill="rgb(226,26,5)" fg:x="23" fg:w="1"/><text x="1.3416%" y="319.50"></text></g><g><title>_nanov2_free (1 samples, 0.05%)</title><rect x="1.0916%" y="293" width="0.0475%" height="15" fill="rgb(249,33,26)" fg:x="23" fg:w="1"/><text x="1.3416%" y="303.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="1.1391%" y="325" width="0.0475%" height="15" fill="rgb(235,183,28)" fg:x="24" fg:w="1"/><text x="1.3891%" y="335.50"></text></g><g><title>_free (3 samples, 0.14%)</title><rect x="1.1865%" y="325" width="0.1424%" height="15" fill="rgb(221,5,38)" fg:x="25" fg:w="3"/><text x="1.4365%" y="335.50"></text></g><g><title>_nanov2_free (12 samples, 0.57%)</title><rect x="1.3289%" y="325" width="0.5695%" height="15" fill="rgb(247,18,42)" fg:x="28" fg:w="12"/><text x="1.5789%" y="335.50"></text></g><g><title>_platform_memset (1 samples, 0.05%)</title><rect x="1.8510%" y="309" width="0.0475%" height="15" fill="rgb(241,131,45)" fg:x="39" fg:w="1"/><text x="2.1010%" y="319.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="1.8984%" y="309" width="0.0475%" height="15" fill="rgb(249,31,29)" fg:x="40" fg:w="1"/><text x="2.1484%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.43%)</title><rect x="1.8984%" y="325" width="0.4271%" height="15" fill="rgb(225,111,53)" fg:x="40" fg:w="9"/><text x="2.1484%" y="335.50"></text></g><g><title>_nanov2_free (8 samples, 0.38%)</title><rect x="1.9459%" y="309" width="0.3797%" height="15" fill="rgb(238,160,17)" fg:x="41" fg:w="8"/><text x="2.1959%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 1.57%)</title><rect x="0.8068%" y="341" width="1.5662%" height="15" fill="rgb(214,148,48)" fg:x="17" fg:w="33"/><text x="1.0568%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[karp::value::Value]&gt; (1 samples, 0.05%)</title><rect x="2.3256%" y="325" width="0.0475%" height="15" fill="rgb(232,36,49)" fg:x="49" fg:w="1"/><text x="2.5756%" y="335.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.19%)</title><rect x="2.3730%" y="341" width="0.1898%" height="15" fill="rgb(209,103,24)" fg:x="50" fg:w="4"/><text x="2.6230%" y="351.50"></text></g><g><title>_free (3 samples, 0.14%)</title><rect x="2.5629%" y="341" width="0.1424%" height="15" fill="rgb(229,88,8)" fg:x="54" fg:w="3"/><text x="2.8129%" y="351.50"></text></g><g><title>_nanov2_free (17 samples, 0.81%)</title><rect x="2.7053%" y="341" width="0.8068%" height="15" fill="rgb(213,181,19)" fg:x="57" fg:w="17"/><text x="2.9553%" y="351.50"></text></g><g><title>_platform_memset (1 samples, 0.05%)</title><rect x="3.5121%" y="341" width="0.0475%" height="15" fill="rgb(254,191,54)" fg:x="74" fg:w="1"/><text x="3.7621%" y="351.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.09%)</title><rect x="3.5596%" y="325" width="0.0949%" height="15" fill="rgb(241,83,37)" fg:x="75" fg:w="2"/><text x="3.8096%" y="335.50"></text></g><g><title>_free (1 samples, 0.05%)</title><rect x="3.6545%" y="325" width="0.0475%" height="15" fill="rgb(233,36,39)" fg:x="77" fg:w="1"/><text x="3.9045%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.62%)</title><rect x="3.5596%" y="341" width="0.6170%" height="15" fill="rgb(226,3,54)" fg:x="75" fg:w="13"/><text x="3.8096%" y="351.50"></text></g><g><title>_nanov2_free (10 samples, 0.47%)</title><rect x="3.7019%" y="325" width="0.4746%" height="15" fill="rgb(245,192,40)" fg:x="78" fg:w="10"/><text x="3.9519%" y="335.50"></text></g><g><title>core::mem::replace (2 samples, 0.09%)</title><rect x="4.1766%" y="341" width="0.0949%" height="15" fill="rgb(238,167,29)" fg:x="88" fg:w="2"/><text x="4.4266%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[karp::value::Value]&gt; (6 samples, 0.28%)</title><rect x="4.2715%" y="341" width="0.2848%" height="15" fill="rgb(232,182,51)" fg:x="90" fg:w="6"/><text x="4.5215%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (89 samples, 4.22%)</title><rect x="0.4271%" y="357" width="4.2240%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="89"/><text x="0.6771%" y="367.50">&lt;allo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;karp::value::Value&gt;&gt; (2 samples, 0.09%)</title><rect x="4.5562%" y="341" width="0.0949%" height="15" fill="rgb(208,69,12)" fg:x="96" fg:w="2"/><text x="4.8062%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="4.6512%" y="357" width="0.0949%" height="15" fill="rgb(235,93,37)" fg:x="98" fg:w="2"/><text x="4.9012%" y="367.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.19%)</title><rect x="4.7461%" y="357" width="0.1898%" height="15" fill="rgb(213,116,39)" fg:x="100" fg:w="4"/><text x="4.9961%" y="367.50"></text></g><g><title>__rustc::__rust_dealloc (1 samples, 0.05%)</title><rect x="4.9359%" y="357" width="0.0475%" height="15" fill="rgb(222,207,29)" fg:x="104" fg:w="1"/><text x="5.1859%" y="367.50"></text></g><g><title>_free (8 samples, 0.38%)</title><rect x="4.9834%" y="357" width="0.3797%" height="15" fill="rgb(206,96,30)" fg:x="105" fg:w="8"/><text x="5.2334%" y="367.50"></text></g><g><title>_nanov2_free (23 samples, 1.09%)</title><rect x="5.3631%" y="357" width="1.0916%" height="15" fill="rgb(218,138,4)" fg:x="113" fg:w="23"/><text x="5.6131%" y="367.50"></text></g><g><title>_platform_memset (2 samples, 0.09%)</title><rect x="6.3598%" y="341" width="0.0949%" height="15" fill="rgb(250,191,14)" fg:x="134" fg:w="2"/><text x="6.6098%" y="351.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.09%)</title><rect x="6.4547%" y="341" width="0.0949%" height="15" fill="rgb(239,60,40)" fg:x="136" fg:w="2"/><text x="6.7047%" y="351.50"></text></g><g><title>_free (4 samples, 0.19%)</title><rect x="6.5496%" y="341" width="0.1898%" height="15" fill="rgb(206,27,48)" fg:x="138" fg:w="4"/><text x="6.7996%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 1.09%)</title><rect x="6.4547%" y="357" width="1.0916%" height="15" fill="rgb(225,35,8)" fg:x="136" fg:w="23"/><text x="6.7047%" y="367.50"></text></g><g><title>_nanov2_free (17 samples, 0.81%)</title><rect x="6.7394%" y="341" width="0.8068%" height="15" fill="rgb(250,213,24)" fg:x="142" fg:w="17"/><text x="6.9894%" y="351.50"></text></g><g><title>core::mem::replace (3 samples, 0.14%)</title><rect x="7.5463%" y="357" width="0.1424%" height="15" fill="rgb(247,123,22)" fg:x="159" fg:w="3"/><text x="7.7963%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[karp::value::Value]&gt; (8 samples, 0.38%)</title><rect x="7.6887%" y="357" width="0.3797%" height="15" fill="rgb(231,138,38)" fg:x="162" fg:w="8"/><text x="7.9387%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;karp::value::Value&gt;&gt; (1 samples, 0.05%)</title><rect x="8.0683%" y="357" width="0.0475%" height="15" fill="rgb(231,145,46)" fg:x="170" fg:w="1"/><text x="8.3183%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (163 samples, 7.74%)</title><rect x="0.4271%" y="373" width="7.7361%" height="15" fill="rgb(251,118,11)" fg:x="9" fg:w="163"/><text x="0.6771%" y="383.50">&lt;alloc::rc:..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.05%)</title><rect x="8.1158%" y="357" width="0.0475%" height="15" fill="rgb(217,147,25)" fg:x="171" fg:w="1"/><text x="8.3658%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="8.1633%" y="373" width="0.0949%" height="15" fill="rgb(247,81,37)" fg:x="172" fg:w="2"/><text x="8.4133%" y="383.50"></text></g><g><title>DYLD-STUB$$free (3 samples, 0.14%)</title><rect x="8.2582%" y="373" width="0.1424%" height="15" fill="rgb(209,12,38)" fg:x="174" fg:w="3"/><text x="8.5082%" y="383.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.05%)</title><rect x="8.4006%" y="373" width="0.0475%" height="15" fill="rgb(227,1,9)" fg:x="177" fg:w="1"/><text x="8.6506%" y="383.50"></text></g><g><title>_free (10 samples, 0.47%)</title><rect x="8.4480%" y="373" width="0.4746%" height="15" fill="rgb(248,47,43)" fg:x="178" fg:w="10"/><text x="8.6980%" y="383.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (1 samples, 0.05%)</title><rect x="10.2041%" y="357" width="0.0475%" height="15" fill="rgb(221,10,30)" fg:x="215" fg:w="1"/><text x="10.4541%" y="367.50"></text></g><g><title>__bzero (1 samples, 0.05%)</title><rect x="10.2515%" y="357" width="0.0475%" height="15" fill="rgb(210,229,1)" fg:x="216" fg:w="1"/><text x="10.5015%" y="367.50"></text></g><g><title>_nanov2_free (30 samples, 1.42%)</title><rect x="8.9226%" y="373" width="1.4238%" height="15" fill="rgb(222,148,37)" fg:x="188" fg:w="30"/><text x="9.1726%" y="383.50"></text></g><g><title>_platform_memset (1 samples, 0.05%)</title><rect x="10.2990%" y="357" width="0.0475%" height="15" fill="rgb(234,67,33)" fg:x="217" fg:w="1"/><text x="10.5490%" y="367.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.19%)</title><rect x="10.3465%" y="357" width="0.1898%" height="15" fill="rgb(247,98,35)" fg:x="218" fg:w="4"/><text x="10.5965%" y="367.50"></text></g><g><title>_free (4 samples, 0.19%)</title><rect x="10.5363%" y="357" width="0.1898%" height="15" fill="rgb(247,138,52)" fg:x="222" fg:w="4"/><text x="10.7863%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (30 samples, 1.42%)</title><rect x="10.3465%" y="373" width="1.4238%" height="15" fill="rgb(213,79,30)" fg:x="218" fg:w="30"/><text x="10.5965%" y="383.50"></text></g><g><title>_nanov2_free (22 samples, 1.04%)</title><rect x="10.7262%" y="357" width="1.0441%" height="15" fill="rgb(246,177,23)" fg:x="226" fg:w="22"/><text x="10.9762%" y="367.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.05%)</title><rect x="11.7703%" y="373" width="0.0475%" height="15" fill="rgb(230,62,27)" fg:x="248" fg:w="1"/><text x="12.0203%" y="383.50"></text></g><g><title>core::mem::replace (4 samples, 0.19%)</title><rect x="11.8178%" y="373" width="0.1898%" height="15" fill="rgb(216,154,8)" fg:x="249" fg:w="4"/><text x="12.0678%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[karp::value::Value]&gt; (4 samples, 0.19%)</title><rect x="12.0076%" y="373" width="0.1898%" height="15" fill="rgb(244,35,45)" fg:x="253" fg:w="4"/><text x="12.2576%" y="383.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (261 samples, 12.39%)</title><rect x="0.0475%" y="389" width="12.3873%" height="15" fill="rgb(251,115,12)" fg:x="1" fg:w="261"/><text x="0.2975%" y="399.50">&lt;alloc::rc::Rc&lt;T,A..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;karp::value::Value&gt;&gt; (5 samples, 0.24%)</title><rect x="12.1974%" y="373" width="0.2373%" height="15" fill="rgb(240,54,50)" fg:x="257" fg:w="5"/><text x="12.4474%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="12.4347%" y="389" width="0.0475%" height="15" fill="rgb(233,84,52)" fg:x="262" fg:w="1"/><text x="12.6847%" y="399.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.09%)</title><rect x="12.4822%" y="389" width="0.0949%" height="15" fill="rgb(207,117,47)" fg:x="263" fg:w="2"/><text x="12.7322%" y="399.50"></text></g><g><title>_free (9 samples, 0.43%)</title><rect x="12.5771%" y="389" width="0.4271%" height="15" fill="rgb(249,43,39)" fg:x="265" fg:w="9"/><text x="12.8271%" y="399.50"></text></g><g><title>_nanov2_free (21 samples, 1.00%)</title><rect x="13.0043%" y="389" width="0.9967%" height="15" fill="rgb(209,38,44)" fg:x="274" fg:w="21"/><text x="13.2543%" y="399.50"></text></g><g><title>__bzero (1 samples, 0.05%)</title><rect x="13.9535%" y="373" width="0.0475%" height="15" fill="rgb(236,212,23)" fg:x="294" fg:w="1"/><text x="14.2035%" y="383.50"></text></g><g><title>DYLD-STUB$$free (5 samples, 0.24%)</title><rect x="14.0009%" y="373" width="0.2373%" height="15" fill="rgb(242,79,21)" fg:x="295" fg:w="5"/><text x="14.2509%" y="383.50"></text></g><g><title>_free (5 samples, 0.24%)</title><rect x="14.2383%" y="373" width="0.2373%" height="15" fill="rgb(211,96,35)" fg:x="300" fg:w="5"/><text x="14.4883%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (29 samples, 1.38%)</title><rect x="14.0009%" y="389" width="1.3764%" height="15" fill="rgb(253,215,40)" fg:x="295" fg:w="29"/><text x="14.2509%" y="399.50"></text></g><g><title>_nanov2_free (19 samples, 0.90%)</title><rect x="14.4756%" y="373" width="0.9018%" height="15" fill="rgb(211,81,21)" fg:x="305" fg:w="19"/><text x="14.7256%" y="383.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.05%)</title><rect x="15.3773%" y="389" width="0.0475%" height="15" fill="rgb(208,190,38)" fg:x="324" fg:w="1"/><text x="15.6273%" y="399.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="15.4248%" y="389" width="0.0475%" height="15" fill="rgb(235,213,38)" fg:x="325" fg:w="1"/><text x="15.6748%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[karp::value::Value]&gt; (3 samples, 0.14%)</title><rect x="15.4722%" y="389" width="0.1424%" height="15" fill="rgb(237,122,38)" fg:x="326" fg:w="3"/><text x="15.7222%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;karp::value::Value&gt;&gt; (2 samples, 0.09%)</title><rect x="15.6146%" y="389" width="0.0949%" height="15" fill="rgb(244,218,35)" fg:x="329" fg:w="2"/><text x="15.8646%" y="399.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (331 samples, 15.71%)</title><rect x="0.0475%" y="405" width="15.7095%" height="15" fill="rgb(240,68,47)" fg:x="1" fg:w="331"/><text x="0.2975%" y="415.50">&lt;alloc::rc::Rc&lt;T,A&gt; as c..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.05%)</title><rect x="15.7095%" y="389" width="0.0475%" height="15" fill="rgb(210,16,53)" fg:x="331" fg:w="1"/><text x="15.9595%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="15.7570%" y="405" width="0.0475%" height="15" fill="rgb(235,124,12)" fg:x="332" fg:w="1"/><text x="16.0070%" y="415.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.19%)</title><rect x="15.8045%" y="405" width="0.1898%" height="15" fill="rgb(224,169,11)" fg:x="333" fg:w="4"/><text x="16.0545%" y="415.50"></text></g><g><title>_free (9 samples, 0.43%)</title><rect x="15.9943%" y="405" width="0.4271%" height="15" fill="rgb(250,166,2)" fg:x="337" fg:w="9"/><text x="16.2443%" y="415.50"></text></g><g><title>_nanov2_free (18 samples, 0.85%)</title><rect x="16.4215%" y="405" width="0.8543%" height="15" fill="rgb(242,216,29)" fg:x="346" fg:w="18"/><text x="16.6715%" y="415.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.19%)</title><rect x="17.2757%" y="389" width="0.1898%" height="15" fill="rgb(230,116,27)" fg:x="364" fg:w="4"/><text x="17.5257%" y="399.50"></text></g><g><title>_free (2 samples, 0.09%)</title><rect x="17.4656%" y="389" width="0.0949%" height="15" fill="rgb(228,99,48)" fg:x="368" fg:w="2"/><text x="17.7156%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (29 samples, 1.38%)</title><rect x="17.2757%" y="405" width="1.3764%" height="15" fill="rgb(253,11,6)" fg:x="364" fg:w="29"/><text x="17.5257%" y="415.50"></text></g><g><title>_nanov2_free (23 samples, 1.09%)</title><rect x="17.5605%" y="389" width="1.0916%" height="15" fill="rgb(247,143,39)" fg:x="370" fg:w="23"/><text x="17.8105%" y="399.50"></text></g><g><title>core::mem::replace (2 samples, 0.09%)</title><rect x="18.6521%" y="405" width="0.0949%" height="15" fill="rgb(236,97,10)" fg:x="393" fg:w="2"/><text x="18.9021%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[karp::value::Value]&gt; (3 samples, 0.14%)</title><rect x="18.7470%" y="405" width="0.1424%" height="15" fill="rgb(233,208,19)" fg:x="395" fg:w="3"/><text x="18.9970%" y="415.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (401 samples, 19.03%)</title><rect x="0.0475%" y="421" width="19.0318%" height="15" fill="rgb(216,164,2)" fg:x="1" fg:w="401"/><text x="0.2975%" y="431.50">&lt;alloc::rc::Rc&lt;T,A&gt; as core::o..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;karp::value::Value&gt;&gt; (4 samples, 0.19%)</title><rect x="18.8894%" y="405" width="0.1898%" height="15" fill="rgb(220,129,5)" fg:x="398" fg:w="4"/><text x="19.1394%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="19.0793%" y="421" width="0.0475%" height="15" fill="rgb(242,17,10)" fg:x="402" fg:w="1"/><text x="19.3293%" y="431.50"></text></g><g><title>__bzero (1 samples, 0.05%)</title><rect x="19.1267%" y="421" width="0.0475%" height="15" fill="rgb(242,107,0)" fg:x="403" fg:w="1"/><text x="19.3767%" y="431.50"></text></g><g><title>_free (4 samples, 0.19%)</title><rect x="19.1742%" y="421" width="0.1898%" height="15" fill="rgb(251,28,31)" fg:x="404" fg:w="4"/><text x="19.4242%" y="431.50"></text></g><g><title>_nanov2_free (24 samples, 1.14%)</title><rect x="19.3640%" y="421" width="1.1391%" height="15" fill="rgb(233,223,10)" fg:x="408" fg:w="24"/><text x="19.6140%" y="431.50"></text></g><g><title>__bzero (2 samples, 0.09%)</title><rect x="20.4082%" y="405" width="0.0949%" height="15" fill="rgb(215,21,27)" fg:x="430" fg:w="2"/><text x="20.6582%" y="415.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="20.5031%" y="405" width="0.0475%" height="15" fill="rgb(232,23,21)" fg:x="432" fg:w="1"/><text x="20.7531%" y="415.50"></text></g><g><title>_free (2 samples, 0.09%)</title><rect x="20.5505%" y="405" width="0.0949%" height="15" fill="rgb(244,5,23)" fg:x="433" fg:w="2"/><text x="20.8005%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.52%)</title><rect x="20.5031%" y="421" width="0.5221%" height="15" fill="rgb(226,81,46)" fg:x="432" fg:w="11"/><text x="20.7531%" y="431.50"></text></g><g><title>_nanov2_free (8 samples, 0.38%)</title><rect x="20.6455%" y="405" width="0.3797%" height="15" fill="rgb(247,70,30)" fg:x="435" fg:w="8"/><text x="20.8955%" y="415.50"></text></g><g><title>core::mem::replace (3 samples, 0.14%)</title><rect x="21.0252%" y="421" width="0.1424%" height="15" fill="rgb(212,68,19)" fg:x="443" fg:w="3"/><text x="21.2752%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[karp::value::Value]&gt; (1 samples, 0.05%)</title><rect x="21.1675%" y="421" width="0.0475%" height="15" fill="rgb(240,187,13)" fg:x="446" fg:w="1"/><text x="21.4175%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;karp::value::Value&gt;&gt; (1 samples, 0.05%)</title><rect x="21.2150%" y="421" width="0.0475%" height="15" fill="rgb(223,113,26)" fg:x="447" fg:w="1"/><text x="21.4650%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.05%)</title><rect x="21.2625%" y="421" width="0.0475%" height="15" fill="rgb(206,192,2)" fg:x="448" fg:w="1"/><text x="21.5125%" y="431.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (41 samples, 1.95%)</title><rect x="21.3099%" y="373" width="1.9459%" height="15" fill="rgb(241,108,4)" fg:x="449" fg:w="41"/><text x="21.5599%" y="383.50">&lt;..</text></g><g><title>madvise (41 samples, 1.95%)</title><rect x="21.3099%" y="357" width="1.9459%" height="15" fill="rgb(247,173,49)" fg:x="449" fg:w="41"/><text x="21.5599%" y="367.50">m..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (496 samples, 23.54%)</title><rect x="0.0475%" y="437" width="23.5406%" height="15" fill="rgb(224,114,35)" fg:x="1" fg:w="496"/><text x="0.2975%" y="447.50">&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::dro..</text></g><g><title>nanov2_madvise_block (48 samples, 2.28%)</title><rect x="21.3099%" y="421" width="2.2781%" height="15" fill="rgb(245,159,27)" fg:x="449" fg:w="48"/><text x="21.5599%" y="431.50">n..</text></g><g><title>nanov2_madvise_block_locked (48 samples, 2.28%)</title><rect x="21.3099%" y="405" width="2.2781%" height="15" fill="rgb(245,172,44)" fg:x="449" fg:w="48"/><text x="21.5599%" y="415.50">n..</text></g><g><title>mvm_madvise_free_plat (48 samples, 2.28%)</title><rect x="21.3099%" y="389" width="2.2781%" height="15" fill="rgb(236,23,11)" fg:x="449" fg:w="48"/><text x="21.5599%" y="399.50">m..</text></g><g><title>madvise (7 samples, 0.33%)</title><rect x="23.2558%" y="373" width="0.3322%" height="15" fill="rgb(205,117,38)" fg:x="490" fg:w="7"/><text x="23.5058%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="23.5880%" y="437" width="0.0475%" height="15" fill="rgb(237,72,25)" fg:x="497" fg:w="1"/><text x="23.8380%" y="447.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.09%)</title><rect x="23.6355%" y="437" width="0.0949%" height="15" fill="rgb(244,70,9)" fg:x="498" fg:w="2"/><text x="23.8855%" y="447.50"></text></g><g><title>__bzero (1 samples, 0.05%)</title><rect x="23.7304%" y="437" width="0.0475%" height="15" fill="rgb(217,125,39)" fg:x="500" fg:w="1"/><text x="23.9804%" y="447.50"></text></g><g><title>_free (4 samples, 0.19%)</title><rect x="23.7779%" y="437" width="0.1898%" height="15" fill="rgb(235,36,10)" fg:x="501" fg:w="4"/><text x="24.0279%" y="447.50"></text></g><g><title>__bzero (1 samples, 0.05%)</title><rect x="24.9169%" y="421" width="0.0475%" height="15" fill="rgb(251,123,47)" fg:x="525" fg:w="1"/><text x="25.1669%" y="431.50"></text></g><g><title>_nanov2_free (22 samples, 1.04%)</title><rect x="23.9677%" y="437" width="1.0441%" height="15" fill="rgb(221,13,13)" fg:x="505" fg:w="22"/><text x="24.2177%" y="447.50"></text></g><g><title>_platform_memset (1 samples, 0.05%)</title><rect x="24.9644%" y="421" width="0.0475%" height="15" fill="rgb(238,131,9)" fg:x="526" fg:w="1"/><text x="25.2144%" y="431.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.09%)</title><rect x="25.0119%" y="421" width="0.0949%" height="15" fill="rgb(211,50,8)" fg:x="527" fg:w="2"/><text x="25.2619%" y="431.50"></text></g><g><title>_free (2 samples, 0.09%)</title><rect x="25.1068%" y="421" width="0.0949%" height="15" fill="rgb(245,182,24)" fg:x="529" fg:w="2"/><text x="25.3568%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.71%)</title><rect x="25.0119%" y="437" width="0.7119%" height="15" fill="rgb(242,14,37)" fg:x="527" fg:w="15"/><text x="25.2619%" y="447.50"></text></g><g><title>_nanov2_free (11 samples, 0.52%)</title><rect x="25.2017%" y="421" width="0.5221%" height="15" fill="rgb(246,228,12)" fg:x="531" fg:w="11"/><text x="25.4517%" y="431.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1 samples, 0.05%)</title><rect x="25.7238%" y="437" width="0.0475%" height="15" fill="rgb(213,55,15)" fg:x="542" fg:w="1"/><text x="25.9738%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[karp::value::Value]&gt; (1 samples, 0.05%)</title><rect x="25.7712%" y="437" width="0.0475%" height="15" fill="rgb(209,9,3)" fg:x="543" fg:w="1"/><text x="26.0212%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;karp::value::Value&gt;&gt; (2 samples, 0.09%)</title><rect x="25.8187%" y="437" width="0.0949%" height="15" fill="rgb(230,59,30)" fg:x="544" fg:w="2"/><text x="26.0687%" y="447.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (548 samples, 26.01%)</title><rect x="0.0475%" y="453" width="26.0085%" height="15" fill="rgb(209,121,21)" fg:x="1" fg:w="548"/><text x="0.2975%" y="463.50">&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Dr..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.14%)</title><rect x="25.9136%" y="437" width="0.1424%" height="15" fill="rgb(220,109,13)" fg:x="546" fg:w="3"/><text x="26.1636%" y="447.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (1 samples, 0.05%)</title><rect x="26.0560%" y="453" width="0.0475%" height="15" fill="rgb(232,18,1)" fg:x="549" fg:w="1"/><text x="26.3060%" y="463.50"></text></g><g><title>DYLD-STUB$$free (3 samples, 0.14%)</title><rect x="26.1035%" y="453" width="0.1424%" height="15" fill="rgb(215,41,42)" fg:x="550" fg:w="3"/><text x="26.3535%" y="463.50"></text></g><g><title>__rustc::__rust_dealloc (1 samples, 0.05%)</title><rect x="26.2458%" y="453" width="0.0475%" height="15" fill="rgb(224,123,36)" fg:x="553" fg:w="1"/><text x="26.4958%" y="463.50"></text></g><g><title>_free (3 samples, 0.14%)</title><rect x="26.2933%" y="453" width="0.1424%" height="15" fill="rgb(240,125,3)" fg:x="554" fg:w="3"/><text x="26.5433%" y="463.50"></text></g><g><title>_nanov2_free (15 samples, 0.71%)</title><rect x="26.4357%" y="453" width="0.7119%" height="15" fill="rgb(205,98,50)" fg:x="557" fg:w="15"/><text x="26.6857%" y="463.50"></text></g><g><title>_platform_memset (1 samples, 0.05%)</title><rect x="27.1476%" y="453" width="0.0475%" height="15" fill="rgb(205,185,37)" fg:x="572" fg:w="1"/><text x="27.3976%" y="463.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="27.1951%" y="437" width="0.0475%" height="15" fill="rgb(238,207,15)" fg:x="573" fg:w="1"/><text x="27.4451%" y="447.50"></text></g><g><title>_free (2 samples, 0.09%)</title><rect x="27.2425%" y="437" width="0.0949%" height="15" fill="rgb(213,199,42)" fg:x="574" fg:w="2"/><text x="27.4925%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.52%)</title><rect x="27.1951%" y="453" width="0.5221%" height="15" fill="rgb(235,201,11)" fg:x="573" fg:w="11"/><text x="27.4451%" y="463.50"></text></g><g><title>_nanov2_free (8 samples, 0.38%)</title><rect x="27.3374%" y="437" width="0.3797%" height="15" fill="rgb(207,46,11)" fg:x="576" fg:w="8"/><text x="27.5874%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;karp::value::Value&gt;&gt; (3 samples, 0.14%)</title><rect x="27.7171%" y="453" width="0.1424%" height="15" fill="rgb(241,35,35)" fg:x="584" fg:w="3"/><text x="27.9671%" y="463.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (588 samples, 27.91%)</title><rect x="0.0475%" y="469" width="27.9070%" height="15" fill="rgb(243,32,47)" fg:x="1" fg:w="588"/><text x="0.2975%" y="479.50">&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.09%)</title><rect x="27.8595%" y="453" width="0.0949%" height="15" fill="rgb(247,202,23)" fg:x="587" fg:w="2"/><text x="28.1095%" y="463.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="27.9544%" y="469" width="0.0475%" height="15" fill="rgb(219,102,11)" fg:x="589" fg:w="1"/><text x="28.2044%" y="479.50"></text></g><g><title>_free (1 samples, 0.05%)</title><rect x="28.0019%" y="469" width="0.0475%" height="15" fill="rgb(243,110,44)" fg:x="590" fg:w="1"/><text x="28.2519%" y="479.50"></text></g><g><title>_nanov2_free (11 samples, 0.52%)</title><rect x="28.0494%" y="469" width="0.5221%" height="15" fill="rgb(222,74,54)" fg:x="591" fg:w="11"/><text x="28.2994%" y="479.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="28.5714%" y="453" width="0.0475%" height="15" fill="rgb(216,99,12)" fg:x="602" fg:w="1"/><text x="28.8214%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.38%)</title><rect x="28.5714%" y="469" width="0.3797%" height="15" fill="rgb(226,22,26)" fg:x="602" fg:w="8"/><text x="28.8214%" y="479.50"></text></g><g><title>_nanov2_free (7 samples, 0.33%)</title><rect x="28.6189%" y="453" width="0.3322%" height="15" fill="rgb(217,163,10)" fg:x="603" fg:w="7"/><text x="28.8689%" y="463.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="28.9511%" y="469" width="0.0475%" height="15" fill="rgb(213,25,53)" fg:x="610" fg:w="1"/><text x="29.2011%" y="479.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (615 samples, 29.19%)</title><rect x="0.0475%" y="485" width="29.1884%" height="15" fill="rgb(252,105,26)" fg:x="1" fg:w="615"/><text x="0.2975%" y="495.50">&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (5 samples, 0.24%)</title><rect x="28.9986%" y="469" width="0.2373%" height="15" fill="rgb(220,39,43)" fg:x="611" fg:w="5"/><text x="29.2486%" y="479.50"></text></g><g><title>_free (2 samples, 0.09%)</title><rect x="29.2359%" y="485" width="0.0949%" height="15" fill="rgb(229,68,48)" fg:x="616" fg:w="2"/><text x="29.4859%" y="495.50"></text></g><g><title>_nanov2_free (9 samples, 0.43%)</title><rect x="29.3308%" y="485" width="0.4271%" height="15" fill="rgb(252,8,32)" fg:x="618" fg:w="9"/><text x="29.5808%" y="495.50"></text></g><g><title>_platform_memset (1 samples, 0.05%)</title><rect x="29.7105%" y="469" width="0.0475%" height="15" fill="rgb(223,20,43)" fg:x="626" fg:w="1"/><text x="29.9605%" y="479.50"></text></g><g><title>DYLD-STUB$$free (3 samples, 0.14%)</title><rect x="29.7579%" y="469" width="0.1424%" height="15" fill="rgb(229,81,49)" fg:x="627" fg:w="3"/><text x="30.0079%" y="479.50"></text></g><g><title>_free (1 samples, 0.05%)</title><rect x="29.9003%" y="469" width="0.0475%" height="15" fill="rgb(236,28,36)" fg:x="630" fg:w="1"/><text x="30.1503%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.28%)</title><rect x="29.7579%" y="485" width="0.2848%" height="15" fill="rgb(249,185,26)" fg:x="627" fg:w="6"/><text x="30.0079%" y="495.50"></text></g><g><title>_nanov2_free (2 samples, 0.09%)</title><rect x="29.9478%" y="469" width="0.0949%" height="15" fill="rgb(249,174,33)" fg:x="631" fg:w="2"/><text x="30.1978%" y="479.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="30.0427%" y="485" width="0.0475%" height="15" fill="rgb(233,201,37)" fg:x="633" fg:w="1"/><text x="30.2927%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[karp::value::Value]&gt; (1 samples, 0.05%)</title><rect x="30.0902%" y="485" width="0.0475%" height="15" fill="rgb(221,78,26)" fg:x="634" fg:w="1"/><text x="30.3402%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (636 samples, 30.19%)</title><rect x="0.0475%" y="501" width="30.1851%" height="15" fill="rgb(250,127,30)" fg:x="1" fg:w="636"/><text x="0.2975%" y="511.50">&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::dr..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.09%)</title><rect x="30.1376%" y="485" width="0.0949%" height="15" fill="rgb(230,49,44)" fg:x="635" fg:w="2"/><text x="30.3876%" y="495.50"></text></g><g><title>_free (2 samples, 0.09%)</title><rect x="30.2326%" y="501" width="0.0949%" height="15" fill="rgb(229,67,23)" fg:x="637" fg:w="2"/><text x="30.4826%" y="511.50"></text></g><g><title>_nanov2_free (1 samples, 0.05%)</title><rect x="30.3275%" y="501" width="0.0475%" height="15" fill="rgb(249,83,47)" fg:x="639" fg:w="1"/><text x="30.5775%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.05%)</title><rect x="30.3749%" y="501" width="0.0475%" height="15" fill="rgb(215,43,3)" fg:x="640" fg:w="1"/><text x="30.6249%" y="511.50"></text></g><g><title>_nanov2_free (1 samples, 0.05%)</title><rect x="30.3749%" y="485" width="0.0475%" height="15" fill="rgb(238,154,13)" fg:x="640" fg:w="1"/><text x="30.6249%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[karp::value::Value]&gt; (1 samples, 0.05%)</title><rect x="30.4224%" y="501" width="0.0475%" height="15" fill="rgb(219,56,2)" fg:x="641" fg:w="1"/><text x="30.6724%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (644 samples, 30.56%)</title><rect x="0.0475%" y="517" width="30.5648%" height="15" fill="rgb(233,0,4)" fg:x="1" fg:w="644"/><text x="0.2975%" y="527.50">&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::dr..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.14%)</title><rect x="30.4699%" y="501" width="0.1424%" height="15" fill="rgb(235,30,7)" fg:x="642" fg:w="3"/><text x="30.7199%" y="511.50"></text></g><g><title>_nanov2_free (3 samples, 0.14%)</title><rect x="30.6122%" y="517" width="0.1424%" height="15" fill="rgb(250,79,13)" fg:x="645" fg:w="3"/><text x="30.8622%" y="527.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="30.7546%" y="501" width="0.0475%" height="15" fill="rgb(211,146,34)" fg:x="648" fg:w="1"/><text x="31.0046%" y="511.50"></text></g><g><title>_free (2 samples, 0.09%)</title><rect x="30.8021%" y="501" width="0.0949%" height="15" fill="rgb(228,22,38)" fg:x="649" fg:w="2"/><text x="31.0521%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.24%)</title><rect x="30.7546%" y="517" width="0.2373%" height="15" fill="rgb(235,168,5)" fg:x="648" fg:w="5"/><text x="31.0046%" y="527.50"></text></g><g><title>_nanov2_free (2 samples, 0.09%)</title><rect x="30.8970%" y="501" width="0.0949%" height="15" fill="rgb(221,155,16)" fg:x="651" fg:w="2"/><text x="31.1470%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;karp::value::Value&gt;&gt; (1 samples, 0.05%)</title><rect x="30.9919%" y="517" width="0.0475%" height="15" fill="rgb(215,215,53)" fg:x="653" fg:w="1"/><text x="31.2419%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (654 samples, 31.04%)</title><rect x="0.0475%" y="533" width="31.0394%" height="15" fill="rgb(223,4,10)" fg:x="1" fg:w="654"/><text x="0.2975%" y="543.50">&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.05%)</title><rect x="31.0394%" y="517" width="0.0475%" height="15" fill="rgb(234,103,6)" fg:x="654" fg:w="1"/><text x="31.2894%" y="527.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="31.0869%" y="485" width="0.0475%" height="15" fill="rgb(227,97,0)" fg:x="655" fg:w="1"/><text x="31.3369%" y="495.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.09%)</title><rect x="31.1343%" y="469" width="0.0949%" height="15" fill="rgb(234,150,53)" fg:x="656" fg:w="2"/><text x="31.3843%" y="479.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.24%)</title><rect x="31.1343%" y="485" width="0.2373%" height="15" fill="rgb(228,201,54)" fg:x="656" fg:w="5"/><text x="31.3843%" y="495.50"></text></g><g><title>nanov2_malloc_type (3 samples, 0.14%)</title><rect x="31.2292%" y="469" width="0.1424%" height="15" fill="rgb(222,22,37)" fg:x="658" fg:w="3"/><text x="31.4792%" y="479.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.05%)</title><rect x="31.3716%" y="485" width="0.0475%" height="15" fill="rgb(237,53,32)" fg:x="661" fg:w="1"/><text x="31.6216%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.38%)</title><rect x="31.0869%" y="501" width="0.3797%" height="15" fill="rgb(233,25,53)" fg:x="655" fg:w="8"/><text x="31.3369%" y="511.50"></text></g><g><title>nanov2_malloc_type (1 samples, 0.05%)</title><rect x="31.4191%" y="485" width="0.0475%" height="15" fill="rgb(210,40,34)" fg:x="662" fg:w="1"/><text x="31.6691%" y="495.50"></text></g><g><title>_free (2 samples, 0.09%)</title><rect x="31.4665%" y="485" width="0.0949%" height="15" fill="rgb(241,220,44)" fg:x="663" fg:w="2"/><text x="31.7165%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.43%)</title><rect x="31.4665%" y="501" width="0.4271%" height="15" fill="rgb(235,28,35)" fg:x="663" fg:w="9"/><text x="31.7165%" y="511.50"></text></g><g><title>_nanov2_free (7 samples, 0.33%)</title><rect x="31.5615%" y="485" width="0.3322%" height="15" fill="rgb(210,56,17)" fg:x="665" fg:w="7"/><text x="31.8115%" y="495.50"></text></g><g><title>_platform_memset (1 samples, 0.05%)</title><rect x="31.8462%" y="469" width="0.0475%" height="15" fill="rgb(224,130,29)" fg:x="671" fg:w="1"/><text x="32.0962%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[karp::value::Value]&gt; (1 samples, 0.05%)</title><rect x="31.8937%" y="501" width="0.0475%" height="15" fill="rgb(235,212,8)" fg:x="672" fg:w="1"/><text x="32.1437%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.19%)</title><rect x="31.9411%" y="485" width="0.1898%" height="15" fill="rgb(223,33,50)" fg:x="673" fg:w="4"/><text x="32.1911%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="32.1310%" y="485" width="0.0475%" height="15" fill="rgb(219,149,13)" fg:x="677" fg:w="1"/><text x="32.3810%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="32.1785%" y="469" width="0.0475%" height="15" fill="rgb(250,156,29)" fg:x="678" fg:w="1"/><text x="32.4285%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="32.2259%" y="469" width="0.0475%" height="15" fill="rgb(216,193,19)" fg:x="679" fg:w="1"/><text x="32.4759%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.14%)</title><rect x="32.2734%" y="469" width="0.1424%" height="15" fill="rgb(216,135,14)" fg:x="680" fg:w="3"/><text x="32.5234%" y="479.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="32.4158%" y="469" width="0.0475%" height="15" fill="rgb(241,47,5)" fg:x="683" fg:w="1"/><text x="32.6658%" y="479.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.05%)</title><rect x="32.4632%" y="453" width="0.0475%" height="15" fill="rgb(233,42,35)" fg:x="684" fg:w="1"/><text x="32.7132%" y="463.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="32.5107%" y="453" width="0.0475%" height="15" fill="rgb(231,13,6)" fg:x="685" fg:w="1"/><text x="32.7607%" y="463.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.24%)</title><rect x="32.4632%" y="469" width="0.2373%" height="15" fill="rgb(207,181,40)" fg:x="684" fg:w="5"/><text x="32.7132%" y="479.50"></text></g><g><title>nanov2_malloc_type (3 samples, 0.14%)</title><rect x="32.5581%" y="453" width="0.1424%" height="15" fill="rgb(254,173,49)" fg:x="686" fg:w="3"/><text x="32.8081%" y="463.50"></text></g><g><title>core::ptr::write (1 samples, 0.05%)</title><rect x="32.7005%" y="469" width="0.0475%" height="15" fill="rgb(221,1,38)" fg:x="689" fg:w="1"/><text x="32.9505%" y="479.50"></text></g><g><title>&lt;&amp;karp::value::Value as core::ops::arith::Mul&gt;::mul (3 samples, 0.14%)</title><rect x="32.7480%" y="453" width="0.1424%" height="15" fill="rgb(206,124,46)" fg:x="690" fg:w="3"/><text x="32.9980%" y="463.50"></text></g><g><title>&lt;karp::value::Value as core::ops::arith::AddAssign&lt;&amp;karp::value::Value&gt;&gt;::add_assign (3 samples, 0.14%)</title><rect x="32.8904%" y="453" width="0.1424%" height="15" fill="rgb(249,21,11)" fg:x="693" fg:w="3"/><text x="33.1404%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.05%)</title><rect x="33.0327%" y="453" width="0.0475%" height="15" fill="rgb(222,201,40)" fg:x="696" fg:w="1"/><text x="33.2827%" y="463.50"></text></g><g><title>core::mem::replace (2 samples, 0.09%)</title><rect x="33.0802%" y="453" width="0.0949%" height="15" fill="rgb(235,61,29)" fg:x="697" fg:w="2"/><text x="33.3302%" y="463.50"></text></g><g><title>&lt;&amp;karp::value::Value as core::ops::arith::Add&gt;::add (4 samples, 0.19%)</title><rect x="33.6972%" y="437" width="0.1898%" height="15" fill="rgb(219,207,3)" fg:x="710" fg:w="4"/><text x="33.9472%" y="447.50"></text></g><g><title>&lt;&amp;karp::value::Value as core::ops::arith::Mul&gt;::mul (1 samples, 0.05%)</title><rect x="33.8870%" y="437" width="0.0475%" height="15" fill="rgb(222,56,46)" fg:x="714" fg:w="1"/><text x="34.1370%" y="447.50"></text></g><g><title>&lt;&amp;karp::value::Value as core::ops::arith::Add&gt;::add (1 samples, 0.05%)</title><rect x="33.9345%" y="421" width="0.0475%" height="15" fill="rgb(239,76,54)" fg:x="715" fg:w="1"/><text x="34.1845%" y="431.50"></text></g><g><title>_malloc_zone_malloc (13 samples, 0.62%)</title><rect x="33.9820%" y="421" width="0.6170%" height="15" fill="rgb(231,124,27)" fg:x="716" fg:w="13"/><text x="34.2320%" y="431.50"></text></g><g><title>DYLD-STUB$$malloc (2 samples, 0.09%)</title><rect x="34.5990%" y="405" width="0.0949%" height="15" fill="rgb(249,195,6)" fg:x="729" fg:w="2"/><text x="34.8490%" y="415.50"></text></g><g><title>__rustc::__rdl_alloc (10 samples, 0.47%)</title><rect x="34.6939%" y="405" width="0.4746%" height="15" fill="rgb(237,174,47)" fg:x="731" fg:w="10"/><text x="34.9439%" y="415.50"></text></g><g><title>_malloc_zone_malloc (28 samples, 1.33%)</title><rect x="35.1685%" y="405" width="1.3289%" height="15" fill="rgb(206,201,31)" fg:x="741" fg:w="28"/><text x="35.4185%" y="415.50"></text></g><g><title>nanov2_allocate_outlined (1 samples, 0.05%)</title><rect x="36.4974%" y="405" width="0.0475%" height="15" fill="rgb(231,57,52)" fg:x="769" fg:w="1"/><text x="36.7474%" y="415.50"></text></g><g><title>alloc::alloc::alloc (124 samples, 5.89%)</title><rect x="34.5990%" y="421" width="5.8851%" height="15" fill="rgb(248,177,22)" fg:x="729" fg:w="124"/><text x="34.8490%" y="431.50">alloc::..</text></g><g><title>nanov2_malloc_type (83 samples, 3.94%)</title><rect x="36.5449%" y="405" width="3.9393%" height="15" fill="rgb(215,211,37)" fg:x="770" fg:w="83"/><text x="36.7949%" y="415.50">nano..</text></g><g><title>nanov2_allocate_outlined (38 samples, 1.80%)</title><rect x="38.6806%" y="389" width="1.8035%" height="15" fill="rgb(241,128,51)" fg:x="815" fg:w="38"/><text x="38.9306%" y="399.50">n..</text></g><g><title>nanov2_find_block_and_allocate (5 samples, 0.24%)</title><rect x="40.2468%" y="373" width="0.2373%" height="15" fill="rgb(227,165,31)" fg:x="848" fg:w="5"/><text x="40.4968%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.09%)</title><rect x="40.4841%" y="421" width="0.0949%" height="15" fill="rgb(228,167,24)" fg:x="853" fg:w="2"/><text x="40.7341%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.09%)</title><rect x="40.5790%" y="421" width="0.0949%" height="15" fill="rgb(228,143,12)" fg:x="855" fg:w="2"/><text x="40.8290%" y="431.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.05%)</title><rect x="40.6739%" y="421" width="0.0475%" height="15" fill="rgb(249,149,8)" fg:x="857" fg:w="1"/><text x="40.9239%" y="431.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.05%)</title><rect x="40.7214%" y="421" width="0.0475%" height="15" fill="rgb(243,35,44)" fg:x="858" fg:w="1"/><text x="40.9714%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (11 samples, 0.52%)</title><rect x="40.7689%" y="421" width="0.5221%" height="15" fill="rgb(246,89,9)" fg:x="859" fg:w="11"/><text x="41.0189%" y="431.50"></text></g><g><title>core::mem::replace (3 samples, 0.14%)</title><rect x="41.2909%" y="421" width="0.1424%" height="15" fill="rgb(233,213,13)" fg:x="870" fg:w="3"/><text x="41.5409%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.05%)</title><rect x="41.4333%" y="421" width="0.0475%" height="15" fill="rgb(233,141,41)" fg:x="873" fg:w="1"/><text x="41.6833%" y="431.50"></text></g><g><title>&lt;karp::value::Value as core::ops::arith::AddAssign&lt;&amp;karp::value::Value&gt;&gt;::add_assign (170 samples, 8.07%)</title><rect x="33.9345%" y="437" width="8.0683%" height="15" fill="rgb(239,167,4)" fg:x="715" fg:w="170"/><text x="34.1845%" y="447.50">&lt;karp::valu..</text></g><g><title>nanov2_malloc_type (11 samples, 0.52%)</title><rect x="41.4808%" y="421" width="0.5221%" height="15" fill="rgb(209,217,16)" fg:x="874" fg:w="11"/><text x="41.7308%" y="431.50"></text></g><g><title>_malloc_zone_malloc (10 samples, 0.47%)</title><rect x="42.0028%" y="437" width="0.4746%" height="15" fill="rgb(219,88,35)" fg:x="885" fg:w="10"/><text x="42.2528%" y="447.50"></text></g><g><title>DYLD-STUB$$malloc (9 samples, 0.43%)</title><rect x="42.4775%" y="421" width="0.4271%" height="15" fill="rgb(220,193,23)" fg:x="895" fg:w="9"/><text x="42.7275%" y="431.50"></text></g><g><title>__rustc::__rdl_alloc (7 samples, 0.33%)</title><rect x="42.9046%" y="421" width="0.3322%" height="15" fill="rgb(230,90,52)" fg:x="904" fg:w="7"/><text x="43.1546%" y="431.50"></text></g><g><title>__rustc::__rust_alloc (2 samples, 0.09%)</title><rect x="43.2368%" y="421" width="0.0949%" height="15" fill="rgb(252,106,19)" fg:x="911" fg:w="2"/><text x="43.4868%" y="431.50"></text></g><g><title>_malloc_zone_malloc (43 samples, 2.04%)</title><rect x="43.3318%" y="421" width="2.0408%" height="15" fill="rgb(206,74,20)" fg:x="913" fg:w="43"/><text x="43.5818%" y="431.50">_..</text></g><g><title>alloc::alloc::alloc (114 samples, 5.41%)</title><rect x="42.4775%" y="437" width="5.4105%" height="15" fill="rgb(230,138,44)" fg:x="895" fg:w="114"/><text x="42.7275%" y="447.50">alloc::..</text></g><g><title>nanov2_malloc_type (53 samples, 2.52%)</title><rect x="45.3726%" y="421" width="2.5154%" height="15" fill="rgb(235,182,43)" fg:x="956" fg:w="53"/><text x="45.6226%" y="431.50">na..</text></g><g><title>nanov2_allocate_outlined (9 samples, 0.43%)</title><rect x="47.4608%" y="405" width="0.4271%" height="15" fill="rgb(242,16,51)" fg:x="1000" fg:w="9"/><text x="47.7108%" y="415.50"></text></g><g><title>nanov2_find_block_and_allocate (1 samples, 0.05%)</title><rect x="47.8405%" y="389" width="0.0475%" height="15" fill="rgb(248,9,4)" fg:x="1008" fg:w="1"/><text x="48.0905%" y="399.50"></text></g><g><title>nanov2_allocate_from_block (1 samples, 0.05%)</title><rect x="47.8405%" y="373" width="0.0475%" height="15" fill="rgb(210,31,22)" fg:x="1008" fg:w="1"/><text x="48.0905%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.09%)</title><rect x="47.8880%" y="437" width="0.0949%" height="15" fill="rgb(239,54,39)" fg:x="1009" fg:w="2"/><text x="48.1380%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.09%)</title><rect x="47.9829%" y="437" width="0.0949%" height="15" fill="rgb(230,99,41)" fg:x="1011" fg:w="2"/><text x="48.2329%" y="447.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (10 samples, 0.47%)</title><rect x="48.0778%" y="437" width="0.4746%" height="15" fill="rgb(253,106,12)" fg:x="1013" fg:w="10"/><text x="48.3278%" y="447.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.05%)</title><rect x="48.5524%" y="437" width="0.0475%" height="15" fill="rgb(213,46,41)" fg:x="1023" fg:w="1"/><text x="48.8024%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (6 samples, 0.28%)</title><rect x="48.5999%" y="437" width="0.2848%" height="15" fill="rgb(215,133,35)" fg:x="1024" fg:w="6"/><text x="48.8499%" y="447.50"></text></g><g><title>core::mem::replace (15 samples, 0.71%)</title><rect x="48.8847%" y="437" width="0.7119%" height="15" fill="rgb(213,28,5)" fg:x="1030" fg:w="15"/><text x="49.1347%" y="447.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.05%)</title><rect x="49.5966%" y="437" width="0.0475%" height="15" fill="rgb(215,77,49)" fg:x="1045" fg:w="1"/><text x="49.8466%" y="447.50"></text></g><g><title>nanov2_malloc_type (5 samples, 0.24%)</title><rect x="49.6440%" y="437" width="0.2373%" height="15" fill="rgb(248,100,22)" fg:x="1046" fg:w="5"/><text x="49.8940%" y="447.50"></text></g><g><title>std::f64::_&lt;impl f64&gt;::tanh (12 samples, 0.57%)</title><rect x="49.8813%" y="437" width="0.5695%" height="15" fill="rgb(208,67,9)" fg:x="1051" fg:w="12"/><text x="50.1313%" y="447.50"></text></g><g><title>tanh (12 samples, 0.57%)</title><rect x="49.8813%" y="421" width="0.5695%" height="15" fill="rgb(219,133,21)" fg:x="1051" fg:w="12"/><text x="50.1313%" y="431.50"></text></g><g><title>karp::Neuron::call (366 samples, 17.37%)</title><rect x="33.1751%" y="453" width="17.3707%" height="15" fill="rgb(246,46,29)" fg:x="699" fg:w="366"/><text x="33.4251%" y="463.50">karp::Neuron::call</text></g><g><title>tanh (2 samples, 0.09%)</title><rect x="50.4509%" y="437" width="0.0949%" height="15" fill="rgb(246,185,52)" fg:x="1063" fg:w="2"/><text x="50.7009%" y="447.50"></text></g><g><title>karp::Layer::call::_{{closure}} (376 samples, 17.85%)</title><rect x="32.7480%" y="469" width="17.8453%" height="15" fill="rgb(252,136,11)" fg:x="690" fg:w="376"/><text x="32.9980%" y="479.50">karp::Layer::call::_{{closur..</text></g><g><title>karp::value::Value::tanh (1 samples, 0.05%)</title><rect x="50.5458%" y="453" width="0.0475%" height="15" fill="rgb(219,138,53)" fg:x="1065" fg:w="1"/><text x="50.7958%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (389 samples, 18.46%)</title><rect x="32.1785%" y="485" width="18.4623%" height="15" fill="rgb(211,51,23)" fg:x="678" fg:w="389"/><text x="32.4285%" y="495.50">&lt;alloc::vec::Vec&lt;T&gt; as core::..</text></g><g><title>karp::Neuron::call (1 samples, 0.05%)</title><rect x="50.5933%" y="469" width="0.0475%" height="15" fill="rgb(247,221,28)" fg:x="1066" fg:w="1"/><text x="50.8433%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="50.6407%" y="485" width="0.0475%" height="15" fill="rgb(251,222,45)" fg:x="1067" fg:w="1"/><text x="50.8907%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.05%)</title><rect x="50.6882%" y="485" width="0.0475%" height="15" fill="rgb(217,162,53)" fg:x="1068" fg:w="1"/><text x="50.9382%" y="495.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="50.6882%" y="469" width="0.0475%" height="15" fill="rgb(229,93,14)" fg:x="1068" fg:w="1"/><text x="50.9382%" y="479.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (1 samples, 0.05%)</title><rect x="50.7356%" y="469" width="0.0475%" height="15" fill="rgb(209,67,49)" fg:x="1069" fg:w="1"/><text x="50.9856%" y="479.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="50.7831%" y="469" width="0.0475%" height="15" fill="rgb(213,87,29)" fg:x="1070" fg:w="1"/><text x="51.0331%" y="479.50"></text></g><g><title>_free (3 samples, 0.14%)</title><rect x="50.8306%" y="469" width="0.1424%" height="15" fill="rgb(205,151,52)" fg:x="1071" fg:w="3"/><text x="51.0806%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (425 samples, 20.17%)</title><rect x="31.0869%" y="533" width="20.1709%" height="15" fill="rgb(253,215,39)" fg:x="655" fg:w="425"/><text x="31.3369%" y="543.50">&lt;alloc::vec::Vec&lt;T&gt; as core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (425 samples, 20.17%)</title><rect x="31.0869%" y="517" width="20.1709%" height="15" fill="rgb(221,220,41)" fg:x="655" fg:w="425"/><text x="31.3369%" y="527.50">core::iter::traits::iterator::It..</text></g><g><title>karp::main::_{{closure}} (407 samples, 19.32%)</title><rect x="31.9411%" y="501" width="19.3166%" height="15" fill="rgb(218,133,21)" fg:x="673" fg:w="407"/><text x="32.1911%" y="511.50">karp::main::_{{closure}}</text></g><g><title>alloc::alloc::dealloc (11 samples, 0.52%)</title><rect x="50.7356%" y="485" width="0.5221%" height="15" fill="rgb(221,193,43)" fg:x="1069" fg:w="11"/><text x="50.9856%" y="495.50"></text></g><g><title>_nanov2_free (6 samples, 0.28%)</title><rect x="50.9729%" y="469" width="0.2848%" height="15" fill="rgb(240,128,52)" fg:x="1074" fg:w="6"/><text x="51.2229%" y="479.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.09%)</title><rect x="51.2577%" y="517" width="0.0949%" height="15" fill="rgb(253,114,12)" fg:x="1080" fg:w="2"/><text x="51.5077%" y="527.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.24%)</title><rect x="51.2577%" y="533" width="0.2373%" height="15" fill="rgb(215,223,47)" fg:x="1080" fg:w="5"/><text x="51.5077%" y="543.50"></text></g><g><title>nanov2_malloc_type (3 samples, 0.14%)</title><rect x="51.3526%" y="517" width="0.1424%" height="15" fill="rgb(248,225,23)" fg:x="1082" fg:w="3"/><text x="51.6026%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.05%)</title><rect x="51.4950%" y="533" width="0.0475%" height="15" fill="rgb(250,108,0)" fg:x="1085" fg:w="1"/><text x="51.7450%" y="543.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.05%)</title><rect x="51.5425%" y="533" width="0.0475%" height="15" fill="rgb(228,208,7)" fg:x="1086" fg:w="1"/><text x="51.7925%" y="543.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.05%)</title><rect x="51.5899%" y="533" width="0.0475%" height="15" fill="rgb(244,45,10)" fg:x="1087" fg:w="1"/><text x="51.8399%" y="543.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.05%)</title><rect x="51.6374%" y="533" width="0.0475%" height="15" fill="rgb(207,125,25)" fg:x="1088" fg:w="1"/><text x="51.8874%" y="543.50"></text></g><g><title>&lt;&amp;karp::value::Value as core::ops::arith::Add&gt;::add (1 samples, 0.05%)</title><rect x="51.6849%" y="517" width="0.0475%" height="15" fill="rgb(210,195,18)" fg:x="1089" fg:w="1"/><text x="51.9349%" y="527.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.09%)</title><rect x="51.7323%" y="485" width="0.0949%" height="15" fill="rgb(249,80,12)" fg:x="1090" fg:w="2"/><text x="51.9823%" y="495.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.14%)</title><rect x="51.7323%" y="501" width="0.1424%" height="15" fill="rgb(221,65,9)" fg:x="1090" fg:w="3"/><text x="51.9823%" y="511.50"></text></g><g><title>nanov2_malloc_type (1 samples, 0.05%)</title><rect x="51.8272%" y="485" width="0.0475%" height="15" fill="rgb(235,49,36)" fg:x="1092" fg:w="1"/><text x="52.0772%" y="495.50"></text></g><g><title>&lt;&amp;karp::value::Value as core::ops::arith::Neg&gt;::neg (7 samples, 0.33%)</title><rect x="51.7323%" y="517" width="0.3322%" height="15" fill="rgb(225,32,20)" fg:x="1090" fg:w="7"/><text x="51.9823%" y="527.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4 samples, 0.19%)</title><rect x="51.8747%" y="501" width="0.1898%" height="15" fill="rgb(215,141,46)" fg:x="1093" fg:w="4"/><text x="52.1247%" y="511.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.09%)</title><rect x="52.0645%" y="517" width="0.0949%" height="15" fill="rgb(250,160,47)" fg:x="1097" fg:w="2"/><text x="52.3145%" y="527.50"></text></g><g><title>DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="52.1595%" y="501" width="0.0475%" height="15" fill="rgb(216,222,40)" fg:x="1099" fg:w="1"/><text x="52.4095%" y="511.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.05%)</title><rect x="52.2069%" y="501" width="0.0475%" height="15" fill="rgb(234,217,39)" fg:x="1100" fg:w="1"/><text x="52.4569%" y="511.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.09%)</title><rect x="52.2544%" y="501" width="0.0949%" height="15" fill="rgb(207,178,40)" fg:x="1101" fg:w="2"/><text x="52.5044%" y="511.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.43%)</title><rect x="52.1595%" y="517" width="0.4271%" height="15" fill="rgb(221,136,13)" fg:x="1099" fg:w="9"/><text x="52.4095%" y="527.50"></text></g><g><title>nanov2_malloc_type (5 samples, 0.24%)</title><rect x="52.3493%" y="501" width="0.2373%" height="15" fill="rgb(249,199,10)" fg:x="1103" fg:w="5"/><text x="52.5993%" y="511.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.05%)</title><rect x="52.5866%" y="517" width="0.0475%" height="15" fill="rgb(249,222,13)" fg:x="1108" fg:w="1"/><text x="52.8366%" y="527.50"></text></g><g><title>karp::main::_{{closure}} (21 samples, 1.00%)</title><rect x="51.6849%" y="533" width="0.9967%" height="15" fill="rgb(244,185,38)" fg:x="1089" fg:w="21"/><text x="51.9349%" y="543.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="52.6341%" y="517" width="0.0475%" height="15" fill="rgb(236,202,9)" fg:x="1109" fg:w="1"/><text x="52.8841%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.05%)</title><rect x="52.6815%" y="517" width="0.0475%" height="15" fill="rgb(250,229,37)" fg:x="1110" fg:w="1"/><text x="52.9315%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="52.7290%" y="517" width="0.0475%" height="15" fill="rgb(206,174,23)" fg:x="1111" fg:w="1"/><text x="52.9790%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.05%)</title><rect x="52.7765%" y="517" width="0.0475%" height="15" fill="rgb(211,33,43)" fg:x="1112" fg:w="1"/><text x="53.0265%" y="527.50"></text></g><g><title>_szone_free (1 samples, 0.05%)</title><rect x="52.7765%" y="501" width="0.0475%" height="15" fill="rgb(245,58,50)" fg:x="1112" fg:w="1"/><text x="53.0265%" y="511.50"></text></g><g><title>core::cell::BorrowRef::new (6 samples, 0.28%)</title><rect x="52.8239%" y="517" width="0.2848%" height="15" fill="rgb(244,68,36)" fg:x="1113" fg:w="6"/><text x="53.0739%" y="527.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (24 samples, 1.14%)</title><rect x="53.1087%" y="517" width="1.1391%" height="15" fill="rgb(232,229,15)" fg:x="1119" fg:w="24"/><text x="53.3587%" y="527.50"></text></g><g><title>core::mem::replace (21 samples, 1.00%)</title><rect x="54.2477%" y="517" width="0.9967%" height="15" fill="rgb(254,30,23)" fg:x="1143" fg:w="21"/><text x="54.4977%" y="527.50"></text></g><g><title>_nanov2_free (1 samples, 0.05%)</title><rect x="55.2444%" y="501" width="0.0475%" height="15" fill="rgb(235,160,14)" fg:x="1164" fg:w="1"/><text x="55.4944%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;karp::value::Value&gt;&gt; (2 samples, 0.09%)</title><rect x="55.2444%" y="517" width="0.0949%" height="15" fill="rgb(212,155,44)" fg:x="1164" fg:w="2"/><text x="55.4944%" y="527.50"></text></g><g><title>free_small (1 samples, 0.05%)</title><rect x="55.2919%" y="501" width="0.0475%" height="15" fill="rgb(226,2,50)" fg:x="1165" fg:w="1"/><text x="55.5419%" y="511.50"></text></g><g><title>small_free_list_add_ptr (1 samples, 0.05%)</title><rect x="55.2919%" y="485" width="0.0475%" height="15" fill="rgb(234,177,6)" fg:x="1165" fg:w="1"/><text x="55.5419%" y="495.50"></text></g><g><title>core::ptr::read (1 samples, 0.05%)</title><rect x="55.3393%" y="517" width="0.0475%" height="15" fill="rgb(217,24,9)" fg:x="1166" fg:w="1"/><text x="55.5893%" y="527.50"></text></g><g><title>karp::value::Oper::augment_kids (9 samples, 0.43%)</title><rect x="55.3868%" y="517" width="0.4271%" height="15" fill="rgb(220,13,46)" fg:x="1167" fg:w="9"/><text x="55.6368%" y="527.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3 samples, 0.14%)</title><rect x="56.5733%" y="501" width="0.1424%" height="15" fill="rgb(239,221,27)" fg:x="1192" fg:w="3"/><text x="56.8233%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.14%)</title><rect x="56.5733%" y="485" width="0.1424%" height="15" fill="rgb(222,198,25)" fg:x="1192" fg:w="3"/><text x="56.8233%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.09%)</title><rect x="56.6208%" y="469" width="0.0949%" height="15" fill="rgb(211,99,13)" fg:x="1193" fg:w="2"/><text x="56.8708%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="56.7157%" y="485" width="0.0475%" height="15" fill="rgb(232,111,31)" fg:x="1195" fg:w="1"/><text x="56.9657%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.05%)</title><rect x="56.7632%" y="485" width="0.0475%" height="15" fill="rgb(245,82,37)" fg:x="1196" fg:w="1"/><text x="57.0132%" y="495.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="56.8106%" y="485" width="0.0475%" height="15" fill="rgb(227,149,46)" fg:x="1197" fg:w="1"/><text x="57.0606%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="56.8106%" y="469" width="0.0475%" height="15" fill="rgb(218,36,50)" fg:x="1197" fg:w="1"/><text x="57.0606%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="56.8581%" y="469" width="0.0475%" height="15" fill="rgb(226,80,48)" fg:x="1198" fg:w="1"/><text x="57.1081%" y="479.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.05%)</title><rect x="56.9056%" y="469" width="0.0475%" height="15" fill="rgb(238,224,15)" fg:x="1199" fg:w="1"/><text x="57.1556%" y="479.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="56.9530%" y="469" width="0.0475%" height="15" fill="rgb(241,136,10)" fg:x="1200" fg:w="1"/><text x="57.2030%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="56.9530%" y="453" width="0.0475%" height="15" fill="rgb(208,32,45)" fg:x="1200" fg:w="1"/><text x="57.2030%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.05%)</title><rect x="57.0005%" y="453" width="0.0475%" height="15" fill="rgb(207,135,9)" fg:x="1201" fg:w="1"/><text x="57.2505%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="57.0479%" y="453" width="0.0475%" height="15" fill="rgb(206,86,44)" fg:x="1202" fg:w="1"/><text x="57.2979%" y="463.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (1 samples, 0.05%)</title><rect x="57.0954%" y="453" width="0.0475%" height="15" fill="rgb(245,177,15)" fg:x="1203" fg:w="1"/><text x="57.3454%" y="463.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.05%)</title><rect x="57.1429%" y="453" width="0.0475%" height="15" fill="rgb(206,64,50)" fg:x="1204" fg:w="1"/><text x="57.3929%" y="463.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="57.1903%" y="437" width="0.0475%" height="15" fill="rgb(234,36,40)" fg:x="1205" fg:w="1"/><text x="57.4403%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.09%)</title><rect x="57.2378%" y="437" width="0.0949%" height="15" fill="rgb(213,64,8)" fg:x="1206" fg:w="2"/><text x="57.4878%" y="447.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="57.3327%" y="437" width="0.0475%" height="15" fill="rgb(210,75,36)" fg:x="1208" fg:w="1"/><text x="57.5827%" y="447.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (8 samples, 0.38%)</title><rect x="57.1903%" y="453" width="0.3797%" height="15" fill="rgb(229,88,21)" fg:x="1205" fg:w="8"/><text x="57.4403%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.19%)</title><rect x="57.3802%" y="437" width="0.1898%" height="15" fill="rgb(252,204,47)" fg:x="1209" fg:w="4"/><text x="57.6302%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.19%)</title><rect x="57.3802%" y="421" width="0.1898%" height="15" fill="rgb(208,77,27)" fg:x="1209" fg:w="4"/><text x="57.6302%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.05%)</title><rect x="57.5700%" y="437" width="0.0475%" height="15" fill="rgb(221,76,26)" fg:x="1213" fg:w="1"/><text x="57.8200%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.05%)</title><rect x="57.6175%" y="437" width="0.0475%" height="15" fill="rgb(225,139,18)" fg:x="1214" fg:w="1"/><text x="57.8675%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.05%)</title><rect x="57.6175%" y="421" width="0.0475%" height="15" fill="rgb(230,137,11)" fg:x="1214" fg:w="1"/><text x="57.8675%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.05%)</title><rect x="57.6649%" y="437" width="0.0475%" height="15" fill="rgb(212,28,1)" fg:x="1215" fg:w="1"/><text x="57.9149%" y="447.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="57.7124%" y="437" width="0.0475%" height="15" fill="rgb(248,164,17)" fg:x="1216" fg:w="1"/><text x="57.9624%" y="447.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.05%)</title><rect x="57.7598%" y="437" width="0.0475%" height="15" fill="rgb(222,171,42)" fg:x="1217" fg:w="1"/><text x="58.0098%" y="447.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="57.8073%" y="421" width="0.0475%" height="15" fill="rgb(243,84,45)" fg:x="1218" fg:w="1"/><text x="58.0573%" y="431.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (2 samples, 0.09%)</title><rect x="57.8073%" y="437" width="0.0949%" height="15" fill="rgb(252,49,23)" fg:x="1218" fg:w="2"/><text x="58.0573%" y="447.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="57.8548%" y="421" width="0.0475%" height="15" fill="rgb(215,19,7)" fg:x="1219" fg:w="1"/><text x="58.1048%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="57.9022%" y="421" width="0.0475%" height="15" fill="rgb(238,81,41)" fg:x="1220" fg:w="1"/><text x="58.1522%" y="431.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (1 samples, 0.05%)</title><rect x="57.9497%" y="421" width="0.0475%" height="15" fill="rgb(210,199,37)" fg:x="1221" fg:w="1"/><text x="58.1997%" y="431.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (3 samples, 0.14%)</title><rect x="57.9972%" y="421" width="0.1424%" height="15" fill="rgb(244,192,49)" fg:x="1222" fg:w="3"/><text x="58.2472%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.05%)</title><rect x="58.1395%" y="421" width="0.0475%" height="15" fill="rgb(226,211,11)" fg:x="1225" fg:w="1"/><text x="58.3895%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="58.1870%" y="405" width="0.0475%" height="15" fill="rgb(236,162,54)" fg:x="1226" fg:w="1"/><text x="58.4370%" y="415.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (2 samples, 0.09%)</title><rect x="58.1870%" y="421" width="0.0949%" height="15" fill="rgb(220,229,9)" fg:x="1226" fg:w="2"/><text x="58.4370%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.05%)</title><rect x="58.2345%" y="405" width="0.0475%" height="15" fill="rgb(250,87,22)" fg:x="1227" fg:w="1"/><text x="58.4845%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (2 samples, 0.09%)</title><rect x="58.2819%" y="405" width="0.0949%" height="15" fill="rgb(239,43,17)" fg:x="1228" fg:w="2"/><text x="58.5319%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (3 samples, 0.14%)</title><rect x="58.3768%" y="405" width="0.1424%" height="15" fill="rgb(231,177,25)" fg:x="1230" fg:w="3"/><text x="58.6268%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.09%)</title><rect x="58.5192%" y="405" width="0.0949%" height="15" fill="rgb(219,179,1)" fg:x="1233" fg:w="2"/><text x="58.7692%" y="415.50"></text></g><g><title>core::intrinsics::likely (4 samples, 0.19%)</title><rect x="58.6141%" y="405" width="0.1898%" height="15" fill="rgb(238,219,53)" fg:x="1235" fg:w="4"/><text x="58.8641%" y="415.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="58.8040%" y="405" width="0.0475%" height="15" fill="rgb(232,167,36)" fg:x="1239" fg:w="1"/><text x="59.0540%" y="415.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="58.8514%" y="405" width="0.0475%" height="15" fill="rgb(244,19,51)" fg:x="1240" fg:w="1"/><text x="59.1014%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="58.8989%" y="405" width="0.0475%" height="15" fill="rgb(224,6,22)" fg:x="1241" fg:w="1"/><text x="59.1489%" y="415.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (2 samples, 0.09%)</title><rect x="58.9464%" y="405" width="0.0949%" height="15" fill="rgb(224,145,5)" fg:x="1242" fg:w="2"/><text x="59.1964%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="59.0888%" y="389" width="0.0475%" height="15" fill="rgb(234,130,49)" fg:x="1245" fg:w="1"/><text x="59.3388%" y="399.50"></text></g><g><title>_free (1 samples, 0.05%)</title><rect x="59.1837%" y="357" width="0.0475%" height="15" fill="rgb(254,6,2)" fg:x="1247" fg:w="1"/><text x="59.4337%" y="367.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (5 samples, 0.24%)</title><rect x="59.0413%" y="405" width="0.2373%" height="15" fill="rgb(208,96,46)" fg:x="1244" fg:w="5"/><text x="59.2913%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.14%)</title><rect x="59.1362%" y="389" width="0.1424%" height="15" fill="rgb(239,3,39)" fg:x="1246" fg:w="3"/><text x="59.3862%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.14%)</title><rect x="59.1362%" y="373" width="0.1424%" height="15" fill="rgb(233,210,1)" fg:x="1246" fg:w="3"/><text x="59.3862%" y="383.50"></text></g><g><title>nanov2_malloc_type (1 samples, 0.05%)</title><rect x="59.2311%" y="357" width="0.0475%" height="15" fill="rgb(244,137,37)" fg:x="1248" fg:w="1"/><text x="59.4811%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="59.2786%" y="389" width="0.0475%" height="15" fill="rgb(240,136,2)" fg:x="1249" fg:w="1"/><text x="59.5286%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="59.3261%" y="389" width="0.0475%" height="15" fill="rgb(239,18,37)" fg:x="1250" fg:w="1"/><text x="59.5761%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="59.3735%" y="389" width="0.0475%" height="15" fill="rgb(218,185,22)" fg:x="1251" fg:w="1"/><text x="59.6235%" y="399.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="59.4210%" y="389" width="0.0475%" height="15" fill="rgb(225,218,4)" fg:x="1252" fg:w="1"/><text x="59.6710%" y="399.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="59.4684%" y="389" width="0.0475%" height="15" fill="rgb(230,182,32)" fg:x="1253" fg:w="1"/><text x="59.7184%" y="399.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="59.5159%" y="389" width="0.0475%" height="15" fill="rgb(242,56,43)" fg:x="1254" fg:w="1"/><text x="59.7659%" y="399.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (3 samples, 0.14%)</title><rect x="59.5634%" y="389" width="0.1424%" height="15" fill="rgb(233,99,24)" fg:x="1255" fg:w="3"/><text x="59.8134%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (2 samples, 0.09%)</title><rect x="59.7057%" y="389" width="0.0949%" height="15" fill="rgb(234,209,42)" fg:x="1258" fg:w="2"/><text x="59.9557%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="59.8007%" y="373" width="0.0475%" height="15" fill="rgb(227,7,12)" fg:x="1260" fg:w="1"/><text x="60.0507%" y="383.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1 samples, 0.05%)</title><rect x="59.8481%" y="373" width="0.0475%" height="15" fill="rgb(245,203,43)" fg:x="1261" fg:w="1"/><text x="60.0981%" y="383.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3 samples, 0.14%)</title><rect x="59.8007%" y="389" width="0.1424%" height="15" fill="rgb(238,205,33)" fg:x="1260" fg:w="3"/><text x="60.0507%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="59.8956%" y="373" width="0.0475%" height="15" fill="rgb(231,56,7)" fg:x="1262" fg:w="1"/><text x="60.1456%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="59.9430%" y="373" width="0.0475%" height="15" fill="rgb(244,186,29)" fg:x="1263" fg:w="1"/><text x="60.1930%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="59.9905%" y="373" width="0.0475%" height="15" fill="rgb(234,111,31)" fg:x="1264" fg:w="1"/><text x="60.2405%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1 samples, 0.05%)</title><rect x="60.0380%" y="373" width="0.0475%" height="15" fill="rgb(241,149,10)" fg:x="1265" fg:w="1"/><text x="60.2880%" y="383.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="60.0854%" y="373" width="0.0475%" height="15" fill="rgb(249,206,44)" fg:x="1266" fg:w="1"/><text x="60.3354%" y="383.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (1 samples, 0.05%)</title><rect x="60.1329%" y="373" width="0.0475%" height="15" fill="rgb(251,153,30)" fg:x="1267" fg:w="1"/><text x="60.3829%" y="383.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (5 samples, 0.24%)</title><rect x="60.1804%" y="373" width="0.2373%" height="15" fill="rgb(239,152,38)" fg:x="1268" fg:w="5"/><text x="60.4304%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.05%)</title><rect x="60.4177%" y="373" width="0.0475%" height="15" fill="rgb(249,139,47)" fg:x="1273" fg:w="1"/><text x="60.6677%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="60.5126%" y="357" width="0.0949%" height="15" fill="rgb(244,64,35)" fg:x="1275" fg:w="2"/><text x="60.7626%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="60.6075%" y="357" width="0.0475%" height="15" fill="rgb(216,46,15)" fg:x="1277" fg:w="1"/><text x="60.8575%" y="367.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (5 samples, 0.24%)</title><rect x="60.4651%" y="373" width="0.2373%" height="15" fill="rgb(250,74,19)" fg:x="1274" fg:w="5"/><text x="60.7151%" y="383.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="60.6550%" y="357" width="0.0475%" height="15" fill="rgb(249,42,33)" fg:x="1278" fg:w="1"/><text x="60.9050%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="60.8923%" y="357" width="0.0475%" height="15" fill="rgb(242,149,17)" fg:x="1283" fg:w="1"/><text x="61.1423%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="60.9397%" y="357" width="0.0475%" height="15" fill="rgb(244,29,21)" fg:x="1284" fg:w="1"/><text x="61.1897%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.05%)</title><rect x="60.9872%" y="357" width="0.0475%" height="15" fill="rgb(220,130,37)" fg:x="1285" fg:w="1"/><text x="61.2372%" y="367.50"></text></g><g><title>small_try_realloc_in_place (2 samples, 0.09%)</title><rect x="61.0346%" y="277" width="0.0949%" height="15" fill="rgb(211,67,2)" fg:x="1286" fg:w="2"/><text x="61.2846%" y="287.50"></text></g><g><title>free_small (1 samples, 0.05%)</title><rect x="61.1296%" y="261" width="0.0475%" height="15" fill="rgb(235,68,52)" fg:x="1288" fg:w="1"/><text x="61.3796%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.19%)</title><rect x="61.0346%" y="357" width="0.1898%" height="15" fill="rgb(246,142,3)" fg:x="1286" fg:w="4"/><text x="61.2846%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4 samples, 0.19%)</title><rect x="61.0346%" y="341" width="0.1898%" height="15" fill="rgb(241,25,7)" fg:x="1286" fg:w="4"/><text x="61.2846%" y="351.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.19%)</title><rect x="61.0346%" y="325" width="0.1898%" height="15" fill="rgb(242,119,39)" fg:x="1286" fg:w="4"/><text x="61.2846%" y="335.50"></text></g><g><title>_realloc (4 samples, 0.19%)</title><rect x="61.0346%" y="309" width="0.1898%" height="15" fill="rgb(241,98,45)" fg:x="1286" fg:w="4"/><text x="61.2846%" y="319.50"></text></g><g><title>_malloc_zone_realloc (4 samples, 0.19%)</title><rect x="61.0346%" y="293" width="0.1898%" height="15" fill="rgb(254,28,30)" fg:x="1286" fg:w="4"/><text x="61.2846%" y="303.50"></text></g><g><title>szone_realloc (2 samples, 0.09%)</title><rect x="61.1296%" y="277" width="0.0949%" height="15" fill="rgb(241,142,54)" fg:x="1288" fg:w="2"/><text x="61.3796%" y="287.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="61.1770%" y="261" width="0.0475%" height="15" fill="rgb(222,85,15)" fg:x="1289" fg:w="1"/><text x="61.4270%" y="271.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.05%)</title><rect x="61.1770%" y="245" width="0.0475%" height="15" fill="rgb(210,85,47)" fg:x="1289" fg:w="1"/><text x="61.4270%" y="255.50"></text></g><g><title>small_malloc_from_free_list (1 samples, 0.05%)</title><rect x="61.1770%" y="229" width="0.0475%" height="15" fill="rgb(224,206,25)" fg:x="1289" fg:w="1"/><text x="61.4270%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.09%)</title><rect x="61.2245%" y="357" width="0.0949%" height="15" fill="rgb(243,201,19)" fg:x="1290" fg:w="2"/><text x="61.4745%" y="367.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (3 samples, 0.14%)</title><rect x="61.3194%" y="357" width="0.1424%" height="15" fill="rgb(236,59,4)" fg:x="1292" fg:w="3"/><text x="61.5694%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="61.4618%" y="357" width="0.0475%" height="15" fill="rgb(254,179,45)" fg:x="1295" fg:w="1"/><text x="61.7118%" y="367.50"></text></g><g><title>core::intrinsics::likely (1 samples, 0.05%)</title><rect x="61.5093%" y="357" width="0.0475%" height="15" fill="rgb(226,14,10)" fg:x="1296" fg:w="1"/><text x="61.7593%" y="367.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="61.5567%" y="357" width="0.0475%" height="15" fill="rgb(244,27,41)" fg:x="1297" fg:w="1"/><text x="61.8067%" y="367.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (1 samples, 0.05%)</title><rect x="61.6042%" y="357" width="0.0475%" height="15" fill="rgb(235,35,32)" fg:x="1298" fg:w="1"/><text x="61.8542%" y="367.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (2 samples, 0.09%)</title><rect x="61.6516%" y="357" width="0.0949%" height="15" fill="rgb(218,68,31)" fg:x="1299" fg:w="2"/><text x="61.9016%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.05%)</title><rect x="61.7466%" y="357" width="0.0475%" height="15" fill="rgb(207,120,37)" fg:x="1301" fg:w="1"/><text x="61.9966%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="61.7940%" y="357" width="0.0475%" height="15" fill="rgb(227,98,0)" fg:x="1302" fg:w="1"/><text x="62.0440%" y="367.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (7 samples, 0.33%)</title><rect x="61.8415%" y="357" width="0.3322%" height="15" fill="rgb(207,7,3)" fg:x="1303" fg:w="7"/><text x="62.0915%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.05%)</title><rect x="62.1737%" y="357" width="0.0475%" height="15" fill="rgb(206,98,19)" fg:x="1310" fg:w="1"/><text x="62.4237%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="62.3161%" y="341" width="0.0949%" height="15" fill="rgb(217,5,26)" fg:x="1313" fg:w="2"/><text x="62.5661%" y="351.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (3 samples, 0.14%)</title><rect x="62.4110%" y="341" width="0.1424%" height="15" fill="rgb(235,190,38)" fg:x="1315" fg:w="3"/><text x="62.6610%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.09%)</title><rect x="62.5534%" y="341" width="0.0949%" height="15" fill="rgb(247,86,24)" fg:x="1318" fg:w="2"/><text x="62.8034%" y="351.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (3 samples, 0.14%)</title><rect x="62.6483%" y="341" width="0.1424%" height="15" fill="rgb(205,101,16)" fg:x="1320" fg:w="3"/><text x="62.8983%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="62.7907%" y="341" width="0.0475%" height="15" fill="rgb(246,168,33)" fg:x="1323" fg:w="1"/><text x="63.0407%" y="351.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (14 samples, 0.66%)</title><rect x="62.2212%" y="357" width="0.6645%" height="15" fill="rgb(231,114,1)" fg:x="1311" fg:w="14"/><text x="62.4712%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.05%)</title><rect x="62.8382%" y="341" width="0.0475%" height="15" fill="rgb(207,184,53)" fg:x="1324" fg:w="1"/><text x="63.0882%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="62.9331%" y="341" width="0.0475%" height="15" fill="rgb(224,95,51)" fg:x="1326" fg:w="1"/><text x="63.1831%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="62.9805%" y="341" width="0.0475%" height="15" fill="rgb(212,188,45)" fg:x="1327" fg:w="1"/><text x="63.2305%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.05%)</title><rect x="63.0280%" y="341" width="0.0475%" height="15" fill="rgb(223,154,38)" fg:x="1328" fg:w="1"/><text x="63.2780%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.09%)</title><rect x="63.0755%" y="341" width="0.0949%" height="15" fill="rgb(251,22,52)" fg:x="1329" fg:w="2"/><text x="63.3255%" y="351.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (7 samples, 0.33%)</title><rect x="63.1704%" y="341" width="0.3322%" height="15" fill="rgb(229,209,22)" fg:x="1331" fg:w="7"/><text x="63.4204%" y="351.50"></text></g><g><title>core::intrinsics::likely (2 samples, 0.09%)</title><rect x="63.5026%" y="341" width="0.0949%" height="15" fill="rgb(234,138,34)" fg:x="1338" fg:w="2"/><text x="63.7526%" y="351.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="63.5975%" y="341" width="0.0475%" height="15" fill="rgb(212,95,11)" fg:x="1340" fg:w="1"/><text x="63.8475%" y="351.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (3 samples, 0.14%)</title><rect x="63.6450%" y="341" width="0.1424%" height="15" fill="rgb(240,179,47)" fg:x="1341" fg:w="3"/><text x="63.8950%" y="351.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (2 samples, 0.09%)</title><rect x="63.7874%" y="341" width="0.0949%" height="15" fill="rgb(240,163,11)" fg:x="1344" fg:w="2"/><text x="64.0374%" y="351.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (7 samples, 0.33%)</title><rect x="63.8823%" y="341" width="0.3322%" height="15" fill="rgb(236,37,12)" fg:x="1346" fg:w="7"/><text x="64.1323%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.05%)</title><rect x="64.2145%" y="341" width="0.0475%" height="15" fill="rgb(232,164,16)" fg:x="1353" fg:w="1"/><text x="64.4645%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.14%)</title><rect x="64.2620%" y="325" width="0.1424%" height="15" fill="rgb(244,205,15)" fg:x="1354" fg:w="3"/><text x="64.5120%" y="335.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="64.4044%" y="325" width="0.0475%" height="15" fill="rgb(223,117,47)" fg:x="1357" fg:w="1"/><text x="64.6544%" y="335.50"></text></g><g><title>core::intrinsics::likely (1 samples, 0.05%)</title><rect x="64.4518%" y="325" width="0.0475%" height="15" fill="rgb(244,107,35)" fg:x="1358" fg:w="1"/><text x="64.7018%" y="335.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="64.4993%" y="325" width="0.0475%" height="15" fill="rgb(205,140,8)" fg:x="1359" fg:w="1"/><text x="64.7493%" y="335.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="64.5467%" y="325" width="0.0475%" height="15" fill="rgb(228,84,46)" fg:x="1360" fg:w="1"/><text x="64.7967%" y="335.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (9 samples, 0.43%)</title><rect x="64.2620%" y="341" width="0.4271%" height="15" fill="rgb(254,188,9)" fg:x="1354" fg:w="9"/><text x="64.5120%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.09%)</title><rect x="64.5942%" y="325" width="0.0949%" height="15" fill="rgb(206,112,54)" fg:x="1361" fg:w="2"/><text x="64.8442%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.14%)</title><rect x="64.8315%" y="325" width="0.1424%" height="15" fill="rgb(216,84,49)" fg:x="1366" fg:w="3"/><text x="65.0815%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.19%)</title><rect x="64.9739%" y="325" width="0.1898%" height="15" fill="rgb(214,194,35)" fg:x="1369" fg:w="4"/><text x="65.2239%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.05%)</title><rect x="65.1637%" y="325" width="0.0475%" height="15" fill="rgb(249,28,3)" fg:x="1373" fg:w="1"/><text x="65.4137%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.05%)</title><rect x="65.2112%" y="325" width="0.0475%" height="15" fill="rgb(222,56,52)" fg:x="1374" fg:w="1"/><text x="65.4612%" y="335.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.09%)</title><rect x="65.2587%" y="325" width="0.0949%" height="15" fill="rgb(245,217,50)" fg:x="1375" fg:w="2"/><text x="65.5087%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="65.3536%" y="325" width="0.0475%" height="15" fill="rgb(213,201,24)" fg:x="1377" fg:w="1"/><text x="65.6036%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.09%)</title><rect x="65.4010%" y="325" width="0.0949%" height="15" fill="rgb(248,116,28)" fg:x="1378" fg:w="2"/><text x="65.6510%" y="335.50"></text></g><g><title>core::intrinsics::likely (2 samples, 0.09%)</title><rect x="65.4960%" y="325" width="0.0949%" height="15" fill="rgb(219,72,43)" fg:x="1380" fg:w="2"/><text x="65.7460%" y="335.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="65.5909%" y="325" width="0.0475%" height="15" fill="rgb(209,138,14)" fg:x="1382" fg:w="1"/><text x="65.8409%" y="335.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (2 samples, 0.09%)</title><rect x="65.6383%" y="325" width="0.0949%" height="15" fill="rgb(222,18,33)" fg:x="1383" fg:w="2"/><text x="65.8883%" y="335.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (2 samples, 0.09%)</title><rect x="65.7333%" y="325" width="0.0949%" height="15" fill="rgb(213,199,7)" fg:x="1385" fg:w="2"/><text x="65.9833%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.09%)</title><rect x="65.8282%" y="325" width="0.0949%" height="15" fill="rgb(250,110,10)" fg:x="1387" fg:w="2"/><text x="66.0782%" y="335.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (9 samples, 0.43%)</title><rect x="65.9231%" y="325" width="0.4271%" height="15" fill="rgb(248,123,6)" fg:x="1389" fg:w="9"/><text x="66.1731%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (2 samples, 0.09%)</title><rect x="66.3503%" y="325" width="0.0949%" height="15" fill="rgb(206,91,31)" fg:x="1398" fg:w="2"/><text x="66.6003%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="66.4926%" y="309" width="0.0949%" height="15" fill="rgb(211,154,13)" fg:x="1401" fg:w="2"/><text x="66.7426%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.05%)</title><rect x="66.5876%" y="309" width="0.0475%" height="15" fill="rgb(225,148,7)" fg:x="1403" fg:w="1"/><text x="66.8376%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="66.6350%" y="309" width="0.0475%" height="15" fill="rgb(220,160,43)" fg:x="1404" fg:w="1"/><text x="66.8850%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.09%)</title><rect x="66.6825%" y="309" width="0.0949%" height="15" fill="rgb(213,52,39)" fg:x="1405" fg:w="2"/><text x="66.9325%" y="319.50"></text></g><g><title>core::intrinsics::likely (3 samples, 0.14%)</title><rect x="66.7774%" y="309" width="0.1424%" height="15" fill="rgb(243,137,7)" fg:x="1407" fg:w="3"/><text x="67.0274%" y="319.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="66.9198%" y="309" width="0.0475%" height="15" fill="rgb(230,79,13)" fg:x="1410" fg:w="1"/><text x="67.1698%" y="319.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (3 samples, 0.14%)</title><rect x="66.9673%" y="309" width="0.1424%" height="15" fill="rgb(247,105,23)" fg:x="1411" fg:w="3"/><text x="67.2173%" y="319.50"></text></g><g><title>_free (1 samples, 0.05%)</title><rect x="67.1096%" y="293" width="0.0475%" height="15" fill="rgb(223,179,41)" fg:x="1414" fg:w="1"/><text x="67.3596%" y="303.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (82 samples, 3.89%)</title><rect x="66.4452%" y="325" width="3.8918%" height="15" fill="rgb(218,9,34)" fg:x="1400" fg:w="82"/><text x="66.6952%" y="335.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (68 samples, 3.23%)</title><rect x="67.1096%" y="309" width="3.2273%" height="15" fill="rgb(222,106,8)" fg:x="1414" fg:w="68"/><text x="67.3596%" y="319.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (67 samples, 3.18%)</title><rect x="67.1571%" y="293" width="3.1799%" height="15" fill="rgb(211,220,0)" fg:x="1415" fg:w="67"/><text x="67.4071%" y="303.50">has..</text></g><g><title>free_small (1 samples, 0.05%)</title><rect x="70.2895%" y="277" width="0.0475%" height="15" fill="rgb(229,52,16)" fg:x="1481" fg:w="1"/><text x="70.5395%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="70.7641%" y="309" width="0.0475%" height="15" fill="rgb(212,155,18)" fg:x="1491" fg:w="1"/><text x="71.0141%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.28%)</title><rect x="70.8116%" y="309" width="0.2848%" height="15" fill="rgb(242,21,14)" fg:x="1492" fg:w="6"/><text x="71.0616%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1 samples, 0.05%)</title><rect x="71.0963%" y="309" width="0.0475%" height="15" fill="rgb(222,19,48)" fg:x="1498" fg:w="1"/><text x="71.3463%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.05%)</title><rect x="71.1438%" y="309" width="0.0475%" height="15" fill="rgb(232,45,27)" fg:x="1499" fg:w="1"/><text x="71.3938%" y="319.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.09%)</title><rect x="71.1913%" y="309" width="0.0949%" height="15" fill="rgb(249,103,42)" fg:x="1500" fg:w="2"/><text x="71.4413%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.09%)</title><rect x="71.2862%" y="309" width="0.0949%" height="15" fill="rgb(246,81,33)" fg:x="1502" fg:w="2"/><text x="71.5362%" y="319.50"></text></g><g><title>core::intrinsics::likely (2 samples, 0.09%)</title><rect x="71.3811%" y="309" width="0.0949%" height="15" fill="rgb(252,33,42)" fg:x="1504" fg:w="2"/><text x="71.6311%" y="319.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="71.4760%" y="309" width="0.0949%" height="15" fill="rgb(209,212,41)" fg:x="1506" fg:w="2"/><text x="71.7260%" y="319.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (8 samples, 0.38%)</title><rect x="71.5710%" y="309" width="0.3797%" height="15" fill="rgb(207,154,6)" fg:x="1508" fg:w="8"/><text x="71.8210%" y="319.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (6 samples, 0.28%)</title><rect x="71.9506%" y="309" width="0.2848%" height="15" fill="rgb(223,64,47)" fg:x="1516" fg:w="6"/><text x="72.2006%" y="319.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (14 samples, 0.66%)</title><rect x="72.2354%" y="309" width="0.6645%" height="15" fill="rgb(211,161,38)" fg:x="1522" fg:w="14"/><text x="72.4854%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="73.0422%" y="293" width="0.0949%" height="15" fill="rgb(219,138,40)" fg:x="1539" fg:w="2"/><text x="73.2922%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.05%)</title><rect x="73.1372%" y="293" width="0.0475%" height="15" fill="rgb(241,228,46)" fg:x="1541" fg:w="1"/><text x="73.3872%" y="303.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (3 samples, 0.14%)</title><rect x="73.1846%" y="293" width="0.1424%" height="15" fill="rgb(223,209,38)" fg:x="1542" fg:w="3"/><text x="73.4346%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.09%)</title><rect x="73.3270%" y="293" width="0.0949%" height="15" fill="rgb(236,164,45)" fg:x="1545" fg:w="2"/><text x="73.5770%" y="303.50"></text></g><g><title>core::intrinsics::likely (2 samples, 0.09%)</title><rect x="73.4219%" y="293" width="0.0949%" height="15" fill="rgb(231,15,5)" fg:x="1547" fg:w="2"/><text x="73.6719%" y="303.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="73.5168%" y="293" width="0.0949%" height="15" fill="rgb(252,35,15)" fg:x="1549" fg:w="2"/><text x="73.7668%" y="303.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (3 samples, 0.14%)</title><rect x="73.6118%" y="293" width="0.1424%" height="15" fill="rgb(248,181,18)" fg:x="1551" fg:w="3"/><text x="73.8618%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="73.7542%" y="293" width="0.0475%" height="15" fill="rgb(233,39,42)" fg:x="1554" fg:w="1"/><text x="74.0042%" y="303.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (29 samples, 1.38%)</title><rect x="72.8999%" y="309" width="1.3764%" height="15" fill="rgb(238,110,33)" fg:x="1536" fg:w="29"/><text x="73.1499%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (10 samples, 0.47%)</title><rect x="73.8016%" y="293" width="0.4746%" height="15" fill="rgb(233,195,10)" fg:x="1555" fg:w="10"/><text x="74.0516%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.38%)</title><rect x="73.8965%" y="277" width="0.3797%" height="15" fill="rgb(254,105,3)" fg:x="1557" fg:w="8"/><text x="74.1465%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="74.4661%" y="293" width="0.0475%" height="15" fill="rgb(221,225,9)" fg:x="1569" fg:w="1"/><text x="74.7161%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.09%)</title><rect x="74.5135%" y="293" width="0.0949%" height="15" fill="rgb(224,227,45)" fg:x="1570" fg:w="2"/><text x="74.7635%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.05%)</title><rect x="74.6084%" y="293" width="0.0475%" height="15" fill="rgb(229,198,43)" fg:x="1572" fg:w="1"/><text x="74.8584%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1 samples, 0.05%)</title><rect x="74.6559%" y="293" width="0.0475%" height="15" fill="rgb(206,209,35)" fg:x="1573" fg:w="1"/><text x="74.9059%" y="303.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.05%)</title><rect x="74.7034%" y="293" width="0.0475%" height="15" fill="rgb(245,195,53)" fg:x="1574" fg:w="1"/><text x="74.9534%" y="303.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.09%)</title><rect x="74.7508%" y="293" width="0.0949%" height="15" fill="rgb(240,92,26)" fg:x="1575" fg:w="2"/><text x="75.0008%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="74.8458%" y="293" width="0.0475%" height="15" fill="rgb(207,40,23)" fg:x="1577" fg:w="1"/><text x="75.0958%" y="303.50"></text></g><g><title>core::intrinsics::likely (2 samples, 0.09%)</title><rect x="74.8932%" y="293" width="0.0949%" height="15" fill="rgb(223,111,35)" fg:x="1578" fg:w="2"/><text x="75.1432%" y="303.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="74.9881%" y="293" width="0.0475%" height="15" fill="rgb(229,147,28)" fg:x="1580" fg:w="1"/><text x="75.2381%" y="303.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="75.0356%" y="293" width="0.0475%" height="15" fill="rgb(211,29,28)" fg:x="1581" fg:w="1"/><text x="75.2856%" y="303.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (4 samples, 0.19%)</title><rect x="75.0831%" y="293" width="0.1898%" height="15" fill="rgb(228,72,33)" fg:x="1582" fg:w="4"/><text x="75.3331%" y="303.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (1 samples, 0.05%)</title><rect x="75.2729%" y="293" width="0.0475%" height="15" fill="rgb(205,214,31)" fg:x="1586" fg:w="1"/><text x="75.5229%" y="303.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (3 samples, 0.14%)</title><rect x="75.3204%" y="293" width="0.1424%" height="15" fill="rgb(224,111,15)" fg:x="1587" fg:w="3"/><text x="75.5704%" y="303.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1 samples, 0.05%)</title><rect x="75.4627%" y="293" width="0.0475%" height="15" fill="rgb(253,21,26)" fg:x="1590" fg:w="1"/><text x="75.7127%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="75.5102%" y="293" width="0.0475%" height="15" fill="rgb(245,139,43)" fg:x="1591" fg:w="1"/><text x="75.7602%" y="303.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (7 samples, 0.33%)</title><rect x="75.5577%" y="293" width="0.3322%" height="15" fill="rgb(252,170,7)" fg:x="1592" fg:w="7"/><text x="75.8077%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.05%)</title><rect x="75.8899%" y="293" width="0.0475%" height="15" fill="rgb(231,118,14)" fg:x="1599" fg:w="1"/><text x="76.1399%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="75.9848%" y="277" width="0.0475%" height="15" fill="rgb(238,83,0)" fg:x="1601" fg:w="1"/><text x="76.2348%" y="287.50"></text></g><g><title>core::intrinsics::likely (2 samples, 0.09%)</title><rect x="76.0323%" y="277" width="0.0949%" height="15" fill="rgb(221,39,39)" fg:x="1602" fg:w="2"/><text x="76.2823%" y="287.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (5 samples, 0.24%)</title><rect x="76.1272%" y="277" width="0.2373%" height="15" fill="rgb(222,119,46)" fg:x="1604" fg:w="5"/><text x="76.3772%" y="287.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (2 samples, 0.09%)</title><rect x="76.3645%" y="277" width="0.0949%" height="15" fill="rgb(222,165,49)" fg:x="1609" fg:w="2"/><text x="76.6145%" y="287.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (12 samples, 0.57%)</title><rect x="75.9374%" y="293" width="0.5695%" height="15" fill="rgb(219,113,52)" fg:x="1600" fg:w="12"/><text x="76.1874%" y="303.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1 samples, 0.05%)</title><rect x="76.4594%" y="277" width="0.0475%" height="15" fill="rgb(214,7,15)" fg:x="1611" fg:w="1"/><text x="76.7094%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="76.8391%" y="277" width="0.0475%" height="15" fill="rgb(235,32,4)" fg:x="1619" fg:w="1"/><text x="77.0891%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.09%)</title><rect x="76.8866%" y="277" width="0.0949%" height="15" fill="rgb(238,90,54)" fg:x="1620" fg:w="2"/><text x="77.1366%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.09%)</title><rect x="76.9815%" y="277" width="0.0949%" height="15" fill="rgb(213,208,19)" fg:x="1622" fg:w="2"/><text x="77.2315%" y="287.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (1 samples, 0.05%)</title><rect x="77.0764%" y="277" width="0.0475%" height="15" fill="rgb(233,156,4)" fg:x="1624" fg:w="1"/><text x="77.3264%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.05%)</title><rect x="77.1239%" y="277" width="0.0475%" height="15" fill="rgb(207,194,5)" fg:x="1625" fg:w="1"/><text x="77.3739%" y="287.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.09%)</title><rect x="77.1713%" y="277" width="0.0949%" height="15" fill="rgb(206,111,30)" fg:x="1626" fg:w="2"/><text x="77.4213%" y="287.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (6 samples, 0.28%)</title><rect x="77.2663%" y="277" width="0.2848%" height="15" fill="rgb(243,70,54)" fg:x="1628" fg:w="6"/><text x="77.5163%" y="287.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="77.5510%" y="277" width="0.0475%" height="15" fill="rgb(242,28,8)" fg:x="1634" fg:w="1"/><text x="77.8010%" y="287.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (3 samples, 0.14%)</title><rect x="77.5985%" y="277" width="0.1424%" height="15" fill="rgb(219,106,18)" fg:x="1635" fg:w="3"/><text x="77.8485%" y="287.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (3 samples, 0.14%)</title><rect x="77.7409%" y="277" width="0.1424%" height="15" fill="rgb(244,222,10)" fg:x="1638" fg:w="3"/><text x="77.9909%" y="287.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (7 samples, 0.33%)</title><rect x="77.8832%" y="277" width="0.3322%" height="15" fill="rgb(236,179,52)" fg:x="1641" fg:w="7"/><text x="78.1332%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="78.2155%" y="277" width="0.0475%" height="15" fill="rgb(213,23,39)" fg:x="1648" fg:w="1"/><text x="78.4655%" y="287.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (7 samples, 0.33%)</title><rect x="78.2629%" y="277" width="0.3322%" height="15" fill="rgb(238,48,10)" fg:x="1649" fg:w="7"/><text x="78.5129%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (2 samples, 0.09%)</title><rect x="78.5952%" y="277" width="0.0949%" height="15" fill="rgb(251,196,23)" fg:x="1656" fg:w="2"/><text x="78.8452%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.05%)</title><rect x="78.6901%" y="261" width="0.0475%" height="15" fill="rgb(250,152,24)" fg:x="1658" fg:w="1"/><text x="78.9401%" y="271.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="78.7375%" y="261" width="0.0475%" height="15" fill="rgb(209,150,17)" fg:x="1659" fg:w="1"/><text x="78.9875%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.09%)</title><rect x="78.7850%" y="261" width="0.0949%" height="15" fill="rgb(234,202,34)" fg:x="1660" fg:w="2"/><text x="79.0350%" y="271.50"></text></g><g><title>core::intrinsics::likely (1 samples, 0.05%)</title><rect x="78.8799%" y="261" width="0.0475%" height="15" fill="rgb(253,148,53)" fg:x="1662" fg:w="1"/><text x="79.1299%" y="271.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (4 samples, 0.19%)</title><rect x="78.9274%" y="261" width="0.1898%" height="15" fill="rgb(218,129,16)" fg:x="1663" fg:w="4"/><text x="79.1774%" y="271.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="79.1172%" y="261" width="0.0475%" height="15" fill="rgb(216,85,19)" fg:x="1667" fg:w="1"/><text x="79.3672%" y="271.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (14 samples, 0.66%)</title><rect x="78.6901%" y="277" width="0.6645%" height="15" fill="rgb(235,228,7)" fg:x="1658" fg:w="14"/><text x="78.9401%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.19%)</title><rect x="79.1647%" y="261" width="0.1898%" height="15" fill="rgb(245,175,0)" fg:x="1668" fg:w="4"/><text x="79.4147%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="79.4495%" y="261" width="0.0475%" height="15" fill="rgb(208,168,36)" fg:x="1674" fg:w="1"/><text x="79.6995%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="79.4969%" y="261" width="0.0475%" height="15" fill="rgb(246,171,24)" fg:x="1675" fg:w="1"/><text x="79.7469%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.24%)</title><rect x="79.5444%" y="261" width="0.2373%" height="15" fill="rgb(215,142,24)" fg:x="1676" fg:w="5"/><text x="79.7944%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1 samples, 0.05%)</title><rect x="79.7817%" y="261" width="0.0475%" height="15" fill="rgb(250,187,7)" fg:x="1681" fg:w="1"/><text x="80.0317%" y="271.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::as_ptr (2 samples, 0.09%)</title><rect x="79.8291%" y="261" width="0.0949%" height="15" fill="rgb(228,66,33)" fg:x="1682" fg:w="2"/><text x="80.0791%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1 samples, 0.05%)</title><rect x="79.9241%" y="261" width="0.0475%" height="15" fill="rgb(234,215,21)" fg:x="1684" fg:w="1"/><text x="80.1741%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.09%)</title><rect x="79.9715%" y="261" width="0.0949%" height="15" fill="rgb(222,191,20)" fg:x="1685" fg:w="2"/><text x="80.2215%" y="271.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (3 samples, 0.14%)</title><rect x="80.0664%" y="261" width="0.1424%" height="15" fill="rgb(245,79,54)" fg:x="1687" fg:w="3"/><text x="80.3164%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="80.2088%" y="261" width="0.0475%" height="15" fill="rgb(240,10,37)" fg:x="1690" fg:w="1"/><text x="80.4588%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="80.2563%" y="261" width="0.0475%" height="15" fill="rgb(214,192,32)" fg:x="1691" fg:w="1"/><text x="80.5063%" y="271.50"></text></g><g><title>core::intrinsics::likely (5 samples, 0.24%)</title><rect x="80.3037%" y="261" width="0.2373%" height="15" fill="rgb(209,36,54)" fg:x="1692" fg:w="5"/><text x="80.5537%" y="271.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (2 samples, 0.09%)</title><rect x="80.5411%" y="261" width="0.0949%" height="15" fill="rgb(220,10,11)" fg:x="1697" fg:w="2"/><text x="80.7911%" y="271.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (1 samples, 0.05%)</title><rect x="80.6360%" y="261" width="0.0475%" height="15" fill="rgb(221,106,17)" fg:x="1699" fg:w="1"/><text x="80.8860%" y="271.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (6 samples, 0.28%)</title><rect x="80.6834%" y="261" width="0.2848%" height="15" fill="rgb(251,142,44)" fg:x="1700" fg:w="6"/><text x="80.9334%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="80.9682%" y="261" width="0.0475%" height="15" fill="rgb(238,13,15)" fg:x="1706" fg:w="1"/><text x="81.2182%" y="271.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (2 samples, 0.09%)</title><rect x="81.0157%" y="261" width="0.0949%" height="15" fill="rgb(208,107,27)" fg:x="1707" fg:w="2"/><text x="81.2657%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (2 samples, 0.09%)</title><rect x="81.1106%" y="261" width="0.0949%" height="15" fill="rgb(205,136,37)" fg:x="1709" fg:w="2"/><text x="81.3606%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (2 samples, 0.09%)</title><rect x="81.2055%" y="261" width="0.0949%" height="15" fill="rgb(250,205,27)" fg:x="1711" fg:w="2"/><text x="81.4555%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.14%)</title><rect x="81.3953%" y="245" width="0.1424%" height="15" fill="rgb(210,80,43)" fg:x="1715" fg:w="3"/><text x="81.6453%" y="255.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="81.5377%" y="245" width="0.0475%" height="15" fill="rgb(247,160,36)" fg:x="1718" fg:w="1"/><text x="81.7877%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="81.5852%" y="245" width="0.0475%" height="15" fill="rgb(234,13,49)" fg:x="1719" fg:w="1"/><text x="81.8352%" y="255.50"></text></g><g><title>core::intrinsics::likely (2 samples, 0.09%)</title><rect x="81.6327%" y="245" width="0.0949%" height="15" fill="rgb(234,122,0)" fg:x="1720" fg:w="2"/><text x="81.8827%" y="255.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="81.7276%" y="245" width="0.0475%" height="15" fill="rgb(207,146,38)" fg:x="1722" fg:w="1"/><text x="81.9776%" y="255.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (12 samples, 0.57%)</title><rect x="81.3004%" y="261" width="0.5695%" height="15" fill="rgb(207,177,25)" fg:x="1713" fg:w="12"/><text x="81.5504%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.09%)</title><rect x="81.7750%" y="245" width="0.0949%" height="15" fill="rgb(211,178,42)" fg:x="1723" fg:w="2"/><text x="82.0250%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.14%)</title><rect x="81.9649%" y="245" width="0.1424%" height="15" fill="rgb(230,69,54)" fg:x="1727" fg:w="3"/><text x="82.2149%" y="255.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.09%)</title><rect x="82.1073%" y="245" width="0.0949%" height="15" fill="rgb(214,135,41)" fg:x="1730" fg:w="2"/><text x="82.3573%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="82.2022%" y="245" width="0.0475%" height="15" fill="rgb(237,67,25)" fg:x="1732" fg:w="1"/><text x="82.4522%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="82.2496%" y="245" width="0.0475%" height="15" fill="rgb(222,189,50)" fg:x="1733" fg:w="1"/><text x="82.4996%" y="255.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="82.2971%" y="245" width="0.0475%" height="15" fill="rgb(245,148,34)" fg:x="1734" fg:w="1"/><text x="82.5471%" y="255.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="82.3446%" y="245" width="0.0949%" height="15" fill="rgb(222,29,6)" fg:x="1735" fg:w="2"/><text x="82.5946%" y="255.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (4 samples, 0.19%)</title><rect x="82.4395%" y="245" width="0.1898%" height="15" fill="rgb(221,189,43)" fg:x="1737" fg:w="4"/><text x="82.6895%" y="255.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (2 samples, 0.09%)</title><rect x="82.6293%" y="245" width="0.0949%" height="15" fill="rgb(207,36,27)" fg:x="1741" fg:w="2"/><text x="82.8793%" y="255.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (3 samples, 0.14%)</title><rect x="82.7243%" y="245" width="0.1424%" height="15" fill="rgb(217,90,24)" fg:x="1743" fg:w="3"/><text x="82.9743%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.09%)</title><rect x="82.8666%" y="245" width="0.0949%" height="15" fill="rgb(224,66,35)" fg:x="1746" fg:w="2"/><text x="83.1166%" y="255.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (6 samples, 0.28%)</title><rect x="82.9616%" y="245" width="0.2848%" height="15" fill="rgb(221,13,50)" fg:x="1748" fg:w="6"/><text x="83.2116%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (2 samples, 0.09%)</title><rect x="83.2463%" y="245" width="0.0949%" height="15" fill="rgb(236,68,49)" fg:x="1754" fg:w="2"/><text x="83.4963%" y="255.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="83.3887%" y="229" width="0.0475%" height="15" fill="rgb(229,146,28)" fg:x="1757" fg:w="1"/><text x="83.6387%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.09%)</title><rect x="83.4362%" y="229" width="0.0949%" height="15" fill="rgb(225,31,38)" fg:x="1758" fg:w="2"/><text x="83.6862%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="83.5311%" y="229" width="0.0475%" height="15" fill="rgb(250,208,3)" fg:x="1760" fg:w="1"/><text x="83.7811%" y="239.50"></text></g><g><title>core::intrinsics::likely (1 samples, 0.05%)</title><rect x="83.5785%" y="229" width="0.0475%" height="15" fill="rgb(246,54,23)" fg:x="1761" fg:w="1"/><text x="83.8285%" y="239.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="83.6260%" y="229" width="0.0949%" height="15" fill="rgb(243,76,11)" fg:x="1762" fg:w="2"/><text x="83.8760%" y="239.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="83.7209%" y="229" width="0.0475%" height="15" fill="rgb(245,21,50)" fg:x="1764" fg:w="1"/><text x="83.9709%" y="239.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (11 samples, 0.52%)</title><rect x="83.3412%" y="245" width="0.5221%" height="15" fill="rgb(228,9,43)" fg:x="1756" fg:w="11"/><text x="83.5912%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.09%)</title><rect x="83.7684%" y="229" width="0.0949%" height="15" fill="rgb(208,100,47)" fg:x="1765" fg:w="2"/><text x="84.0184%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="84.0057%" y="229" width="0.0475%" height="15" fill="rgb(232,26,8)" fg:x="1770" fg:w="1"/><text x="84.2557%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.24%)</title><rect x="84.0532%" y="229" width="0.2373%" height="15" fill="rgb(216,166,38)" fg:x="1771" fg:w="5"/><text x="84.3032%" y="239.50"></text></g><g><title>_nanov2_free (1 samples, 0.05%)</title><rect x="84.2905%" y="133" width="0.0475%" height="15" fill="rgb(251,202,51)" fg:x="1776" fg:w="1"/><text x="84.5405%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.09%)</title><rect x="84.2905%" y="229" width="0.0949%" height="15" fill="rgb(254,216,34)" fg:x="1776" fg:w="2"/><text x="84.5405%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.09%)</title><rect x="84.2905%" y="213" width="0.0949%" height="15" fill="rgb(251,32,27)" fg:x="1776" fg:w="2"/><text x="84.5405%" y="223.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.09%)</title><rect x="84.2905%" y="197" width="0.0949%" height="15" fill="rgb(208,127,28)" fg:x="1776" fg:w="2"/><text x="84.5405%" y="207.50"></text></g><g><title>_realloc (2 samples, 0.09%)</title><rect x="84.2905%" y="181" width="0.0949%" height="15" fill="rgb(224,137,22)" fg:x="1776" fg:w="2"/><text x="84.5405%" y="191.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.09%)</title><rect x="84.2905%" y="165" width="0.0949%" height="15" fill="rgb(254,70,32)" fg:x="1776" fg:w="2"/><text x="84.5405%" y="175.50"></text></g><g><title>nanov2_realloc (2 samples, 0.09%)</title><rect x="84.2905%" y="149" width="0.0949%" height="15" fill="rgb(229,75,37)" fg:x="1776" fg:w="2"/><text x="84.5405%" y="159.50"></text></g><g><title>_platform_memmove (1 samples, 0.05%)</title><rect x="84.3379%" y="133" width="0.0475%" height="15" fill="rgb(252,64,23)" fg:x="1777" fg:w="1"/><text x="84.5879%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.05%)</title><rect x="84.3854%" y="229" width="0.0475%" height="15" fill="rgb(232,162,48)" fg:x="1778" fg:w="1"/><text x="84.6354%" y="239.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="84.4328%" y="229" width="0.0475%" height="15" fill="rgb(246,160,12)" fg:x="1779" fg:w="1"/><text x="84.6828%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="84.4803%" y="229" width="0.0475%" height="15" fill="rgb(247,166,0)" fg:x="1780" fg:w="1"/><text x="84.7303%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="84.5278%" y="229" width="0.0475%" height="15" fill="rgb(249,219,21)" fg:x="1781" fg:w="1"/><text x="84.7778%" y="239.50"></text></g><g><title>core::intrinsics::likely (2 samples, 0.09%)</title><rect x="84.5752%" y="229" width="0.0949%" height="15" fill="rgb(205,209,3)" fg:x="1782" fg:w="2"/><text x="84.8252%" y="239.50"></text></g><g><title>core::mem::replace (2 samples, 0.09%)</title><rect x="84.6701%" y="229" width="0.0949%" height="15" fill="rgb(243,44,1)" fg:x="1784" fg:w="2"/><text x="84.9201%" y="239.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (3 samples, 0.14%)</title><rect x="84.7651%" y="229" width="0.1424%" height="15" fill="rgb(206,159,16)" fg:x="1786" fg:w="3"/><text x="85.0151%" y="239.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (3 samples, 0.14%)</title><rect x="84.9075%" y="229" width="0.1424%" height="15" fill="rgb(244,77,30)" fg:x="1789" fg:w="3"/><text x="85.1575%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.09%)</title><rect x="85.0498%" y="229" width="0.0949%" height="15" fill="rgb(218,69,12)" fg:x="1792" fg:w="2"/><text x="85.2998%" y="239.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (4 samples, 0.19%)</title><rect x="85.1448%" y="229" width="0.1898%" height="15" fill="rgb(212,87,7)" fg:x="1794" fg:w="4"/><text x="85.3948%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="85.4295%" y="213" width="0.0475%" height="15" fill="rgb(245,114,25)" fg:x="1800" fg:w="1"/><text x="85.6795%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.09%)</title><rect x="85.4770%" y="213" width="0.0949%" height="15" fill="rgb(210,61,42)" fg:x="1801" fg:w="2"/><text x="85.7270%" y="223.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="85.5719%" y="213" width="0.0475%" height="15" fill="rgb(211,52,33)" fg:x="1803" fg:w="1"/><text x="85.8219%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="85.6194%" y="213" width="0.0475%" height="15" fill="rgb(234,58,33)" fg:x="1804" fg:w="1"/><text x="85.8694%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="85.6668%" y="213" width="0.0475%" height="15" fill="rgb(220,115,36)" fg:x="1805" fg:w="1"/><text x="85.9168%" y="223.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="85.7143%" y="213" width="0.0475%" height="15" fill="rgb(243,153,54)" fg:x="1806" fg:w="1"/><text x="85.9643%" y="223.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (10 samples, 0.47%)</title><rect x="85.3346%" y="229" width="0.4746%" height="15" fill="rgb(251,47,18)" fg:x="1798" fg:w="10"/><text x="85.5846%" y="239.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="85.7617%" y="213" width="0.0475%" height="15" fill="rgb(242,102,42)" fg:x="1807" fg:w="1"/><text x="86.0117%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="85.8092%" y="213" width="0.0475%" height="15" fill="rgb(234,31,38)" fg:x="1808" fg:w="1"/><text x="86.0592%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.05%)</title><rect x="85.8567%" y="213" width="0.0475%" height="15" fill="rgb(221,117,51)" fg:x="1809" fg:w="1"/><text x="86.1067%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1 samples, 0.05%)</title><rect x="85.9041%" y="213" width="0.0475%" height="15" fill="rgb(212,20,18)" fg:x="1810" fg:w="1"/><text x="86.1541%" y="223.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::as_ptr (1 samples, 0.05%)</title><rect x="85.9516%" y="213" width="0.0475%" height="15" fill="rgb(245,133,36)" fg:x="1811" fg:w="1"/><text x="86.2016%" y="223.50"></text></g><g><title>_malloc_zone_realloc (2 samples, 0.09%)</title><rect x="86.0465%" y="149" width="0.0949%" height="15" fill="rgb(212,6,19)" fg:x="1813" fg:w="2"/><text x="86.2965%" y="159.50"></text></g><g><title>nanov2_realloc (2 samples, 0.09%)</title><rect x="86.0465%" y="133" width="0.0949%" height="15" fill="rgb(218,1,36)" fg:x="1813" fg:w="2"/><text x="86.2965%" y="143.50"></text></g><g><title>DYLD-STUB$$_platform_memmove (1 samples, 0.05%)</title><rect x="86.0940%" y="117" width="0.0475%" height="15" fill="rgb(246,84,54)" fg:x="1814" fg:w="1"/><text x="86.3440%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4 samples, 0.19%)</title><rect x="85.9991%" y="197" width="0.1898%" height="15" fill="rgb(242,110,6)" fg:x="1812" fg:w="4"/><text x="86.2491%" y="207.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.19%)</title><rect x="85.9991%" y="181" width="0.1898%" height="15" fill="rgb(214,47,5)" fg:x="1812" fg:w="4"/><text x="86.2491%" y="191.50"></text></g><g><title>_realloc (4 samples, 0.19%)</title><rect x="85.9991%" y="165" width="0.1898%" height="15" fill="rgb(218,159,25)" fg:x="1812" fg:w="4"/><text x="86.2491%" y="175.50"></text></g><g><title>nanov2_size (1 samples, 0.05%)</title><rect x="86.1414%" y="149" width="0.0475%" height="15" fill="rgb(215,211,28)" fg:x="1815" fg:w="1"/><text x="86.3914%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.24%)</title><rect x="85.9991%" y="213" width="0.2373%" height="15" fill="rgb(238,59,32)" fg:x="1812" fg:w="5"/><text x="86.2491%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.05%)</title><rect x="86.1889%" y="197" width="0.0475%" height="15" fill="rgb(226,82,3)" fg:x="1816" fg:w="1"/><text x="86.4389%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.09%)</title><rect x="86.2364%" y="213" width="0.0949%" height="15" fill="rgb(240,164,32)" fg:x="1817" fg:w="2"/><text x="86.4864%" y="223.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.09%)</title><rect x="86.3313%" y="213" width="0.0949%" height="15" fill="rgb(232,46,7)" fg:x="1819" fg:w="2"/><text x="86.5813%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="86.4262%" y="213" width="0.0475%" height="15" fill="rgb(229,129,53)" fg:x="1821" fg:w="1"/><text x="86.6762%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.09%)</title><rect x="86.4737%" y="213" width="0.0949%" height="15" fill="rgb(234,188,29)" fg:x="1822" fg:w="2"/><text x="86.7237%" y="223.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (5 samples, 0.24%)</title><rect x="86.5686%" y="213" width="0.2373%" height="15" fill="rgb(246,141,4)" fg:x="1824" fg:w="5"/><text x="86.8186%" y="223.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (1 samples, 0.05%)</title><rect x="86.8059%" y="213" width="0.0475%" height="15" fill="rgb(229,23,39)" fg:x="1829" fg:w="1"/><text x="87.0559%" y="223.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (2 samples, 0.09%)</title><rect x="86.8533%" y="213" width="0.0949%" height="15" fill="rgb(206,12,3)" fg:x="1830" fg:w="2"/><text x="87.1033%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.05%)</title><rect x="86.9483%" y="213" width="0.0475%" height="15" fill="rgb(252,226,20)" fg:x="1832" fg:w="1"/><text x="87.1983%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="86.9957%" y="213" width="0.0475%" height="15" fill="rgb(216,123,35)" fg:x="1833" fg:w="1"/><text x="87.2457%" y="223.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (7 samples, 0.33%)</title><rect x="87.0432%" y="213" width="0.3322%" height="15" fill="rgb(212,68,40)" fg:x="1834" fg:w="7"/><text x="87.2932%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.05%)</title><rect x="87.3754%" y="213" width="0.0475%" height="15" fill="rgb(254,125,32)" fg:x="1841" fg:w="1"/><text x="87.6254%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.05%)</title><rect x="87.4703%" y="197" width="0.0475%" height="15" fill="rgb(253,97,22)" fg:x="1843" fg:w="1"/><text x="87.7203%" y="207.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="87.5178%" y="197" width="0.0475%" height="15" fill="rgb(241,101,14)" fg:x="1844" fg:w="1"/><text x="87.7678%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="87.5653%" y="197" width="0.0475%" height="15" fill="rgb(238,103,29)" fg:x="1845" fg:w="1"/><text x="87.8153%" y="207.50"></text></g><g><title>_nanov2_free (1 samples, 0.05%)</title><rect x="87.6602%" y="181" width="0.0475%" height="15" fill="rgb(233,195,47)" fg:x="1847" fg:w="1"/><text x="87.9102%" y="191.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (123 samples, 5.84%)</title><rect x="87.4229%" y="213" width="5.8377%" height="15" fill="rgb(246,218,30)" fg:x="1842" fg:w="123"/><text x="87.6729%" y="223.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (119 samples, 5.65%)</title><rect x="87.6127%" y="197" width="5.6478%" height="15" fill="rgb(219,145,47)" fg:x="1846" fg:w="119"/><text x="87.8627%" y="207.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (117 samples, 5.55%)</title><rect x="87.7076%" y="181" width="5.5529%" height="15" fill="rgb(243,12,26)" fg:x="1848" fg:w="117"/><text x="87.9576%" y="191.50">hashbro..</text></g><g><title>free_small (3 samples, 0.14%)</title><rect x="93.1182%" y="165" width="0.1424%" height="15" fill="rgb(214,87,16)" fg:x="1962" fg:w="3"/><text x="93.3682%" y="175.50"></text></g><g><title>small_free_list_add_ptr (2 samples, 0.09%)</title><rect x="93.1656%" y="149" width="0.0949%" height="15" fill="rgb(208,99,42)" fg:x="1963" fg:w="2"/><text x="93.4156%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="93.2606%" y="197" width="0.0949%" height="15" fill="rgb(253,99,2)" fg:x="1965" fg:w="2"/><text x="93.5106%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.09%)</title><rect x="93.3555%" y="197" width="0.0949%" height="15" fill="rgb(220,168,23)" fg:x="1967" fg:w="2"/><text x="93.6055%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.05%)</title><rect x="93.4504%" y="197" width="0.0475%" height="15" fill="rgb(242,38,24)" fg:x="1969" fg:w="1"/><text x="93.7004%" y="207.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.05%)</title><rect x="93.4979%" y="197" width="0.0475%" height="15" fill="rgb(225,182,9)" fg:x="1970" fg:w="1"/><text x="93.7479%" y="207.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (3 samples, 0.14%)</title><rect x="93.5453%" y="197" width="0.1424%" height="15" fill="rgb(243,178,37)" fg:x="1971" fg:w="3"/><text x="93.7953%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="93.6877%" y="197" width="0.0475%" height="15" fill="rgb(232,139,19)" fg:x="1974" fg:w="1"/><text x="93.9377%" y="207.50"></text></g><g><title>core::intrinsics::likely (2 samples, 0.09%)</title><rect x="93.7352%" y="197" width="0.0949%" height="15" fill="rgb(225,201,24)" fg:x="1975" fg:w="2"/><text x="93.9852%" y="207.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (3 samples, 0.14%)</title><rect x="93.8301%" y="197" width="0.1424%" height="15" fill="rgb(221,47,46)" fg:x="1977" fg:w="3"/><text x="94.0801%" y="207.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (1 samples, 0.05%)</title><rect x="93.9725%" y="197" width="0.0475%" height="15" fill="rgb(249,23,13)" fg:x="1980" fg:w="1"/><text x="94.2225%" y="207.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (3 samples, 0.14%)</title><rect x="94.0199%" y="197" width="0.1424%" height="15" fill="rgb(219,9,5)" fg:x="1981" fg:w="3"/><text x="94.2699%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.05%)</title><rect x="94.1623%" y="197" width="0.0475%" height="15" fill="rgb(254,171,16)" fg:x="1984" fg:w="1"/><text x="94.4123%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="94.2572%" y="181" width="0.0475%" height="15" fill="rgb(230,171,20)" fg:x="1986" fg:w="1"/><text x="94.5072%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (3 samples, 0.14%)</title><rect x="94.3047%" y="181" width="0.1424%" height="15" fill="rgb(210,71,41)" fg:x="1987" fg:w="3"/><text x="94.5547%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.09%)</title><rect x="94.4471%" y="181" width="0.0949%" height="15" fill="rgb(206,173,20)" fg:x="1990" fg:w="2"/><text x="94.6971%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.09%)</title><rect x="94.5420%" y="181" width="0.0949%" height="15" fill="rgb(233,88,34)" fg:x="1992" fg:w="2"/><text x="94.7920%" y="191.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (10 samples, 0.47%)</title><rect x="94.2098%" y="197" width="0.4746%" height="15" fill="rgb(223,209,46)" fg:x="1985" fg:w="10"/><text x="94.4598%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.05%)</title><rect x="94.6369%" y="181" width="0.0475%" height="15" fill="rgb(250,43,18)" fg:x="1994" fg:w="1"/><text x="94.8869%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="94.8268%" y="181" width="0.0475%" height="15" fill="rgb(208,13,10)" fg:x="1998" fg:w="1"/><text x="95.0768%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="94.8742%" y="181" width="0.0475%" height="15" fill="rgb(212,200,36)" fg:x="1999" fg:w="1"/><text x="95.1242%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="94.9217%" y="181" width="0.0475%" height="15" fill="rgb(225,90,30)" fg:x="2000" fg:w="1"/><text x="95.1717%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1 samples, 0.05%)</title><rect x="94.9692%" y="181" width="0.0475%" height="15" fill="rgb(236,182,39)" fg:x="2001" fg:w="1"/><text x="95.2192%" y="191.50"></text></g><g><title>_nanov2_free (1 samples, 0.05%)</title><rect x="95.0166%" y="101" width="0.0475%" height="15" fill="rgb(212,144,35)" fg:x="2002" fg:w="1"/><text x="95.2666%" y="111.50"></text></g><g><title>default_zone_realloc (1 samples, 0.05%)</title><rect x="95.0641%" y="101" width="0.0475%" height="15" fill="rgb(228,63,44)" fg:x="2003" fg:w="1"/><text x="95.3141%" y="111.50"></text></g><g><title>nanov2_realloc (1 samples, 0.05%)</title><rect x="95.1115%" y="101" width="0.0475%" height="15" fill="rgb(228,109,6)" fg:x="2004" fg:w="1"/><text x="95.3615%" y="111.50"></text></g><g><title>_nanov2_free (1 samples, 0.05%)</title><rect x="95.1115%" y="85" width="0.0475%" height="15" fill="rgb(238,117,24)" fg:x="2004" fg:w="1"/><text x="95.3615%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.24%)</title><rect x="95.0166%" y="181" width="0.2373%" height="15" fill="rgb(242,26,26)" fg:x="2002" fg:w="5"/><text x="95.2666%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (5 samples, 0.24%)</title><rect x="95.0166%" y="165" width="0.2373%" height="15" fill="rgb(221,92,48)" fg:x="2002" fg:w="5"/><text x="95.2666%" y="175.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.24%)</title><rect x="95.0166%" y="149" width="0.2373%" height="15" fill="rgb(209,209,32)" fg:x="2002" fg:w="5"/><text x="95.2666%" y="159.50"></text></g><g><title>_realloc (5 samples, 0.24%)</title><rect x="95.0166%" y="133" width="0.2373%" height="15" fill="rgb(221,70,22)" fg:x="2002" fg:w="5"/><text x="95.2666%" y="143.50"></text></g><g><title>_malloc_zone_realloc (5 samples, 0.24%)</title><rect x="95.0166%" y="117" width="0.2373%" height="15" fill="rgb(248,145,5)" fg:x="2002" fg:w="5"/><text x="95.2666%" y="127.50"></text></g><g><title>szone_realloc (2 samples, 0.09%)</title><rect x="95.1590%" y="101" width="0.0949%" height="15" fill="rgb(226,116,26)" fg:x="2005" fg:w="2"/><text x="95.4090%" y="111.50"></text></g><g><title>small_try_realloc_in_place (2 samples, 0.09%)</title><rect x="95.1590%" y="85" width="0.0949%" height="15" fill="rgb(244,5,17)" fg:x="2005" fg:w="2"/><text x="95.4090%" y="95.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.09%)</title><rect x="95.2539%" y="181" width="0.0949%" height="15" fill="rgb(252,159,33)" fg:x="2007" fg:w="2"/><text x="95.5039%" y="191.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.05%)</title><rect x="95.3488%" y="181" width="0.0475%" height="15" fill="rgb(206,71,0)" fg:x="2009" fg:w="1"/><text x="95.5988%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.09%)</title><rect x="95.3963%" y="181" width="0.0949%" height="15" fill="rgb(233,118,54)" fg:x="2010" fg:w="2"/><text x="95.6463%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.05%)</title><rect x="95.4912%" y="181" width="0.0475%" height="15" fill="rgb(234,83,48)" fg:x="2012" fg:w="1"/><text x="95.7412%" y="191.50"></text></g><g><title>core::intrinsics::likely (1 samples, 0.05%)</title><rect x="95.5387%" y="181" width="0.0475%" height="15" fill="rgb(228,3,54)" fg:x="2013" fg:w="1"/><text x="95.7887%" y="191.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (3 samples, 0.14%)</title><rect x="95.5861%" y="181" width="0.1424%" height="15" fill="rgb(226,155,13)" fg:x="2014" fg:w="3"/><text x="95.8361%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="95.7285%" y="181" width="0.0475%" height="15" fill="rgb(241,28,37)" fg:x="2017" fg:w="1"/><text x="95.9785%" y="191.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (2 samples, 0.09%)</title><rect x="95.7760%" y="181" width="0.0949%" height="15" fill="rgb(233,93,10)" fg:x="2018" fg:w="2"/><text x="96.0260%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.05%)</title><rect x="95.8709%" y="181" width="0.0475%" height="15" fill="rgb(225,113,19)" fg:x="2020" fg:w="1"/><text x="96.1209%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="95.9658%" y="165" width="0.0475%" height="15" fill="rgb(241,2,18)" fg:x="2022" fg:w="1"/><text x="96.2158%" y="175.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="96.0133%" y="165" width="0.0475%" height="15" fill="rgb(228,207,21)" fg:x="2023" fg:w="1"/><text x="96.2633%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="96.0607%" y="165" width="0.0475%" height="15" fill="rgb(213,211,35)" fg:x="2024" fg:w="1"/><text x="96.3107%" y="175.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="96.1082%" y="165" width="0.0475%" height="15" fill="rgb(209,83,10)" fg:x="2025" fg:w="1"/><text x="96.3582%" y="175.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="96.1557%" y="165" width="0.0475%" height="15" fill="rgb(209,164,1)" fg:x="2026" fg:w="1"/><text x="96.4057%" y="175.50"></text></g><g><title>_free (1 samples, 0.05%)</title><rect x="96.2031%" y="149" width="0.0475%" height="15" fill="rgb(213,184,43)" fg:x="2027" fg:w="1"/><text x="96.4531%" y="159.50"></text></g><g><title>_platform_memset (1 samples, 0.05%)</title><rect x="96.2506%" y="149" width="0.0475%" height="15" fill="rgb(231,61,34)" fg:x="2028" fg:w="1"/><text x="96.5006%" y="159.50"></text></g><g><title>_szone_free (2 samples, 0.09%)</title><rect x="97.7219%" y="133" width="0.0949%" height="15" fill="rgb(235,75,3)" fg:x="2059" fg:w="2"/><text x="97.9719%" y="143.50"></text></g><g><title>free_tiny (1 samples, 0.05%)</title><rect x="97.8168%" y="133" width="0.0475%" height="15" fill="rgb(220,106,47)" fg:x="2061" fg:w="1"/><text x="98.0668%" y="143.50"></text></g><g><title>small_free_list_add_ptr (1 samples, 0.05%)</title><rect x="97.9117%" y="85" width="0.0475%" height="15" fill="rgb(210,196,33)" fg:x="2063" fg:w="1"/><text x="98.1617%" y="95.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (44 samples, 2.09%)</title><rect x="95.9184%" y="181" width="2.0883%" height="15" fill="rgb(229,154,42)" fg:x="2021" fg:w="44"/><text x="96.1684%" y="191.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (38 samples, 1.80%)</title><rect x="96.2031%" y="165" width="1.8035%" height="15" fill="rgb(228,114,26)" fg:x="2027" fg:w="38"/><text x="96.4531%" y="175.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (36 samples, 1.71%)</title><rect x="96.2981%" y="149" width="1.7086%" height="15" fill="rgb(208,144,1)" fg:x="2029" fg:w="36"/><text x="96.5481%" y="159.50"></text></g><g><title>szone_malloc_should_clear (3 samples, 0.14%)</title><rect x="97.8643%" y="133" width="0.1424%" height="15" fill="rgb(239,112,37)" fg:x="2062" fg:w="3"/><text x="98.1143%" y="143.50"></text></g><g><title>small_malloc_should_clear (3 samples, 0.14%)</title><rect x="97.8643%" y="117" width="0.1424%" height="15" fill="rgb(210,96,50)" fg:x="2062" fg:w="3"/><text x="98.1143%" y="127.50"></text></g><g><title>small_malloc_from_free_list (3 samples, 0.14%)</title><rect x="97.8643%" y="101" width="0.1424%" height="15" fill="rgb(222,178,2)" fg:x="2062" fg:w="3"/><text x="98.1143%" y="111.50"></text></g><g><title>small_free_list_remove_ptr_no_clear (1 samples, 0.05%)</title><rect x="97.9592%" y="85" width="0.0475%" height="15" fill="rgb(226,74,18)" fg:x="2064" fg:w="1"/><text x="98.2092%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="98.0066%" y="165" width="0.0475%" height="15" fill="rgb(225,67,54)" fg:x="2065" fg:w="1"/><text x="98.2566%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.09%)</title><rect x="98.0541%" y="165" width="0.0949%" height="15" fill="rgb(251,92,32)" fg:x="2066" fg:w="2"/><text x="98.3041%" y="175.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="98.1490%" y="165" width="0.0475%" height="15" fill="rgb(228,149,22)" fg:x="2068" fg:w="1"/><text x="98.3990%" y="175.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (2 samples, 0.09%)</title><rect x="98.1965%" y="165" width="0.0949%" height="15" fill="rgb(243,54,13)" fg:x="2069" fg:w="2"/><text x="98.4465%" y="175.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (1 samples, 0.05%)</title><rect x="98.2914%" y="165" width="0.0475%" height="15" fill="rgb(243,180,28)" fg:x="2071" fg:w="1"/><text x="98.5414%" y="175.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.05%)</title><rect x="98.3389%" y="165" width="0.0475%" height="15" fill="rgb(208,167,24)" fg:x="2072" fg:w="1"/><text x="98.5889%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.05%)</title><rect x="98.3863%" y="165" width="0.0475%" height="15" fill="rgb(245,73,45)" fg:x="2073" fg:w="1"/><text x="98.6363%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.05%)</title><rect x="98.4338%" y="149" width="0.0475%" height="15" fill="rgb(237,203,48)" fg:x="2074" fg:w="1"/><text x="98.6838%" y="159.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="98.4813%" y="149" width="0.0475%" height="15" fill="rgb(211,197,16)" fg:x="2075" fg:w="1"/><text x="98.7313%" y="159.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="98.5287%" y="149" width="0.0475%" height="15" fill="rgb(243,99,51)" fg:x="2076" fg:w="1"/><text x="98.7787%" y="159.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (6 samples, 0.28%)</title><rect x="98.4338%" y="165" width="0.2848%" height="15" fill="rgb(215,123,29)" fg:x="2074" fg:w="6"/><text x="98.6838%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.14%)</title><rect x="98.5762%" y="149" width="0.1424%" height="15" fill="rgb(239,186,37)" fg:x="2077" fg:w="3"/><text x="98.8262%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="98.8609%" y="149" width="0.0475%" height="15" fill="rgb(252,136,39)" fg:x="2083" fg:w="1"/><text x="99.1109%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="98.9084%" y="149" width="0.0475%" height="15" fill="rgb(223,213,32)" fg:x="2084" fg:w="1"/><text x="99.1584%" y="159.50"></text></g><g><title>_realloc (1 samples, 0.05%)</title><rect x="98.9559%" y="101" width="0.0475%" height="15" fill="rgb(233,115,5)" fg:x="2085" fg:w="1"/><text x="99.2059%" y="111.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.05%)</title><rect x="98.9559%" y="85" width="0.0475%" height="15" fill="rgb(207,226,44)" fg:x="2085" fg:w="1"/><text x="99.2059%" y="95.50"></text></g><g><title>nanov2_realloc (1 samples, 0.05%)</title><rect x="98.9559%" y="69" width="0.0475%" height="15" fill="rgb(208,126,0)" fg:x="2085" fg:w="1"/><text x="99.2059%" y="79.50"></text></g><g><title>_nanov2_free (1 samples, 0.05%)</title><rect x="98.9559%" y="53" width="0.0475%" height="15" fill="rgb(244,66,21)" fg:x="2085" fg:w="1"/><text x="99.2059%" y="63.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (1 samples, 0.05%)</title><rect x="98.9559%" y="37" width="0.0475%" height="15" fill="rgb(222,97,12)" fg:x="2085" fg:w="1"/><text x="99.2059%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.09%)</title><rect x="98.9559%" y="149" width="0.0949%" height="15" fill="rgb(219,213,19)" fg:x="2085" fg:w="2"/><text x="99.2059%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.09%)</title><rect x="98.9559%" y="133" width="0.0949%" height="15" fill="rgb(252,169,30)" fg:x="2085" fg:w="2"/><text x="99.2059%" y="143.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.09%)</title><rect x="98.9559%" y="117" width="0.0949%" height="15" fill="rgb(206,32,51)" fg:x="2085" fg:w="2"/><text x="99.2059%" y="127.50"></text></g><g><title>nanov2_size (1 samples, 0.05%)</title><rect x="99.0033%" y="101" width="0.0475%" height="15" fill="rgb(250,172,42)" fg:x="2086" fg:w="1"/><text x="99.2533%" y="111.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (1 samples, 0.05%)</title><rect x="99.0508%" y="149" width="0.0475%" height="15" fill="rgb(209,34,43)" fg:x="2087" fg:w="1"/><text x="99.3008%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="99.0982%" y="149" width="0.0475%" height="15" fill="rgb(223,11,35)" fg:x="2088" fg:w="1"/><text x="99.3482%" y="159.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (3 samples, 0.14%)</title><rect x="99.1457%" y="149" width="0.1424%" height="15" fill="rgb(251,219,26)" fg:x="2089" fg:w="3"/><text x="99.3957%" y="159.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="99.2881%" y="133" width="0.0475%" height="15" fill="rgb(231,119,3)" fg:x="2092" fg:w="1"/><text x="99.5381%" y="143.50"></text></g><g><title>core::num::_&lt;impl u64&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="99.3355%" y="133" width="0.0475%" height="15" fill="rgb(216,97,11)" fg:x="2093" fg:w="1"/><text x="99.5855%" y="143.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (12 samples, 0.57%)</title><rect x="99.2881%" y="149" width="0.5695%" height="15" fill="rgb(223,59,9)" fg:x="2092" fg:w="12"/><text x="99.5381%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (10 samples, 0.47%)</title><rect x="99.3830%" y="133" width="0.4746%" height="15" fill="rgb(233,93,31)" fg:x="2094" fg:w="10"/><text x="99.6330%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.47%)</title><rect x="99.3830%" y="117" width="0.4746%" height="15" fill="rgb(239,81,33)" fg:x="2094" fg:w="10"/><text x="99.6330%" y="127.50"></text></g><g><title>_szone_free (1 samples, 0.05%)</title><rect x="99.8102%" y="101" width="0.0475%" height="15" fill="rgb(213,120,34)" fg:x="2103" fg:w="1"/><text x="100.0602%" y="111.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="99.8576%" y="133" width="0.0475%" height="15" fill="rgb(243,49,53)" fg:x="2104" fg:w="1"/><text x="100.1076%" y="143.50"></text></g><g><title>karp::value::Value::backward (930 samples, 44.14%)</title><rect x="55.8140%" y="517" width="44.1386%" height="15" fill="rgb(247,216,33)" fg:x="1176" fg:w="930"/><text x="56.0640%" y="527.50">karp::value::Value::backward</text></g><g><title>karp::value::Value::postorder (911 samples, 43.24%)</title><rect x="56.7157%" y="501" width="43.2368%" height="15" fill="rgb(226,26,14)" fg:x="1195" fg:w="911"/><text x="56.9657%" y="511.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (908 samples, 43.09%)</title><rect x="56.8581%" y="485" width="43.0944%" height="15" fill="rgb(215,49,53)" fg:x="1198" fg:w="908"/><text x="57.1081%" y="495.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (905 samples, 42.95%)</title><rect x="57.0005%" y="469" width="42.9521%" height="15" fill="rgb(245,162,40)" fg:x="1201" fg:w="905"/><text x="57.2505%" y="479.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (893 samples, 42.38%)</title><rect x="57.5700%" y="453" width="42.3825%" height="15" fill="rgb(229,68,17)" fg:x="1213" fg:w="893"/><text x="57.8200%" y="463.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (886 samples, 42.05%)</title><rect x="57.9022%" y="437" width="42.0503%" height="15" fill="rgb(213,182,10)" fg:x="1220" fg:w="886"/><text x="58.1522%" y="447.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (878 samples, 41.67%)</title><rect x="58.2819%" y="421" width="41.6706%" height="15" fill="rgb(245,125,30)" fg:x="1228" fg:w="878"/><text x="58.5319%" y="431.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (857 samples, 40.67%)</title><rect x="59.2786%" y="405" width="40.6739%" height="15" fill="rgb(232,202,2)" fg:x="1249" fg:w="857"/><text x="59.5286%" y="415.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (843 samples, 40.01%)</title><rect x="59.9430%" y="389" width="40.0095%" height="15" fill="rgb(237,140,51)" fg:x="1263" fg:w="843"/><text x="60.1930%" y="399.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (827 samples, 39.25%)</title><rect x="60.7024%" y="373" width="39.2501%" height="15" fill="rgb(236,157,25)" fg:x="1279" fg:w="827"/><text x="60.9524%" y="383.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (781 samples, 37.07%)</title><rect x="62.8856%" y="357" width="37.0669%" height="15" fill="rgb(219,209,0)" fg:x="1325" fg:w="781"/><text x="63.1356%" y="367.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (743 samples, 35.26%)</title><rect x="64.6891%" y="341" width="35.2634%" height="15" fill="rgb(240,116,54)" fg:x="1363" fg:w="743"/><text x="64.9391%" y="351.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (624 samples, 29.62%)</title><rect x="70.3370%" y="325" width="29.6156%" height="15" fill="rgb(216,10,36)" fg:x="1482" fg:w="624"/><text x="70.5870%" y="335.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (541 samples, 25.68%)</title><rect x="74.2762%" y="309" width="25.6763%" height="15" fill="rgb(222,72,44)" fg:x="1565" fg:w="541"/><text x="74.5262%" y="319.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (494 samples, 23.45%)</title><rect x="76.5069%" y="293" width="23.4457%" height="15" fill="rgb(232,159,9)" fg:x="1612" fg:w="494"/><text x="76.7569%" y="303.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (434 samples, 20.60%)</title><rect x="79.3545%" y="277" width="20.5980%" height="15" fill="rgb(210,39,32)" fg:x="1672" fg:w="434"/><text x="79.6045%" y="287.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (381 samples, 18.08%)</title><rect x="81.8700%" y="261" width="18.0826%" height="15" fill="rgb(216,194,45)" fg:x="1725" fg:w="381"/><text x="82.1200%" y="271.50">karp::value::Value::postorder</text></g><g><title>karp::value::Value::postorder (339 samples, 16.09%)</title><rect x="83.8633%" y="245" width="16.0892%" height="15" fill="rgb(218,18,35)" fg:x="1767" fg:w="339"/><text x="84.1133%" y="255.50">karp::value::Value::posto..</text></g><g><title>karp::value::Value::postorder (298 samples, 14.14%)</title><rect x="85.8092%" y="229" width="14.1433%" height="15" fill="rgb(207,83,51)" fg:x="1808" fg:w="298"/><text x="86.0592%" y="239.50">karp::value::Value::p..</text></g><g><title>karp::value::Value::postorder (141 samples, 6.69%)</title><rect x="93.2606%" y="213" width="6.6920%" height="15" fill="rgb(225,63,43)" fg:x="1965" fg:w="141"/><text x="93.5106%" y="223.50">karp::val..</text></g><g><title>karp::value::Value::postorder (111 samples, 5.27%)</title><rect x="94.6844%" y="197" width="5.2682%" height="15" fill="rgb(207,57,36)" fg:x="1995" fg:w="111"/><text x="94.9344%" y="207.50">karp::..</text></g><g><title>karp::value::Value::postorder (41 samples, 1.95%)</title><rect x="98.0066%" y="181" width="1.9459%" height="15" fill="rgb(216,99,33)" fg:x="2065" fg:w="41"/><text x="98.2566%" y="191.50">k..</text></g><g><title>karp::value::Value::postorder (26 samples, 1.23%)</title><rect x="98.7186%" y="165" width="1.2340%" height="15" fill="rgb(225,42,16)" fg:x="2080" fg:w="26"/><text x="98.9686%" y="175.50"></text></g><g><title>karp::value::Value::postorder (2 samples, 0.09%)</title><rect x="99.8576%" y="149" width="0.0949%" height="15" fill="rgb(220,201,45)" fg:x="2104" fg:w="2"/><text x="100.1076%" y="159.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="99.9051%" y="133" width="0.0475%" height="15" fill="rgb(225,33,4)" fg:x="2105" fg:w="1"/><text x="100.1551%" y="143.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="99.9051%" y="117" width="0.0475%" height="15" fill="rgb(224,33,50)" fg:x="2105" fg:w="1"/><text x="100.1551%" y="127.50"></text></g><g><title>all (2,107 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(246,198,51)" fg:x="0" fg:w="2107"/><text x="0.2500%" y="639.50"></text></g><g><title>start (2,107 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(205,22,4)" fg:x="0" fg:w="2107"/><text x="0.2500%" y="623.50">start</text></g><g><title>main (2,106 samples, 99.95%)</title><rect x="0.0475%" y="597" width="99.9525%" height="15" fill="rgb(206,3,8)" fg:x="1" fg:w="2106"/><text x="0.2975%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (2,106 samples, 99.95%)</title><rect x="0.0475%" y="581" width="99.9525%" height="15" fill="rgb(251,23,15)" fg:x="1" fg:w="2106"/><text x="0.2975%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (2,106 samples, 99.95%)</title><rect x="0.0475%" y="565" width="99.9525%" height="15" fill="rgb(252,88,28)" fg:x="1" fg:w="2106"/><text x="0.2975%" y="575.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (2,106 samples, 99.95%)</title><rect x="0.0475%" y="549" width="99.9525%" height="15" fill="rgb(212,127,14)" fg:x="1" fg:w="2106"/><text x="0.2975%" y="559.50">core::ops::function::FnOnce::call_once</text></g><g><title>karp::main (997 samples, 47.32%)</title><rect x="52.6815%" y="533" width="47.3185%" height="15" fill="rgb(247,145,37)" fg:x="1110" fg:w="997"/><text x="52.9315%" y="543.50">karp::main</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.05%)</title><rect x="99.9525%" y="517" width="0.0475%" height="15" fill="rgb(209,117,53)" fg:x="2106" fg:w="1"/><text x="100.2025%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.05%)</title><rect x="99.9525%" y="501" width="0.0475%" height="15" fill="rgb(212,90,42)" fg:x="2106" fg:w="1"/><text x="100.2025%" y="511.50"></text></g></svg></svg>